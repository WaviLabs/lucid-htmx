unset shellHook
PATH=${PATH:-}
nix_saved_PATH="$PATH"
XDG_DATA_DIRS=${XDG_DATA_DIRS:-}
nix_saved_XDG_DATA_DIRS="$XDG_DATA_DIRS"
AR='ar'
export AR
AS='as'
export AS
BASH='/nix/store/306znyj77fv49kwnkpxmb0j2znqpa8bj-bash-5.2p26/bin/bash'
CC='gcc'
export CC
CONFIG_SHELL='/nix/store/306znyj77fv49kwnkpxmb0j2znqpa8bj-bash-5.2p26/bin/bash'
export CONFIG_SHELL
CXX='g++'
export CXX
HOSTTYPE='x86_64'
HOST_PATH='/nix/store/j4m3lwhh4x0bzilvi77d512ahry775nq-ncurses-6.4/bin:/nix/store/jdd2r3d94zpabmzxyxd4nvw298gqp736-haskell-language-server-2.8.0.0/bin:/nix/store/ydnwlw5lwgpp3mi4di3g8mhv9msq0ws1-aeson-pretty-0.8.10/bin:/nix/store/3xbknfc5c0n8svygx3ssg5rpj5mrm4s8-apply-refact-0.13.0.0/bin:/nix/store/lnp12bydmfwjf19wbnw0xzynq1xx86ad-ghc-9.6.4/bin:/nix/store/2y4palh4vyanc4qyhsizmha9ccw04nnw-floskell-0.11.1/bin:/nix/store/nc3flraclai92s471zmv4a500ipzgiwp-fourmolu-0.14.0.0/bin:/nix/store/1cq4dnb8dpnylrw9n23y51yvninznf8h-ghcide-2.8.0.0/bin:/nix/store/hvyib7r7sgdka9yja9kwayr5visz2y3j-constraints-extras-0.4.0.0/bin:/nix/store/77q7qyvmxnmv3x9q61pkavpx8wm0d9a0-hie-bios-0.14.0/bin:/nix/store/bq0qw04zcgw9925fzachx3swck8arywi-hiedb-0.6.0.0/bin:/nix/store/5krls67y7ixlvxw6bpiz0lh5pprx65nj-lsp-types-2.1.1.0/bin:/nix/store/5chk2nlpaalswsf9nhgvsv96v7cn4lz7-implicit-hie-0.1.4.0/bin:/nix/store/d9x1dz0qh9qp7s44v2k84yhrawsyrg7n-hlint-3.6.1/bin:/nix/store/17grgbpnfrisn0bkwfxix2asbwlwin1a-cpphs-1.20.9.1/bin:/nix/store/9jl0bkz73s7kavljkbf59c2xzszahsp7-hscolour-1.25/bin:/nix/store/sljqwpgx889hdkv6rb4zxkjrpdygyv8x-ormolu-0.7.2.0-bin/bin:/nix/store/zbjd0dqvh8101v65bk08bclx1pgwjq2p-retrie-1.2.3/bin:/nix/store/j6xc5cmwxlyzrrxgd4h3hxgy7i03nky4-stan-0.1.2.1/bin:/nix/store/gm04r104ym6h097cza1yjq434354dj8l-extensions-0.1.0.1/bin:/nix/store/pldgz5252fwmpkh8x19r1wmm1kml8akd-pretty-simple-4.1.2.0/bin:/nix/store/gkjzpyj79g14kwz8qckcvxqq0sgc7iqd-stylish-haskell-0.14.5.0/bin:/nix/store/a6djvp6rn5nkwc1lcd5inazxanvbfnsa-cabal2nix-2.19.1/bin:/nix/store/7w42pb3mbi98g3nc5nn24ad11fsg51sp-ghcid-0.8.9-bin/bin:/nix/store/h7xga24bhjjwxrkcwljnyiakppj643lf-fourmolu-0.14.0.0/bin:/nix/store/ffjh4599brdvpc5lxi0nac5d1m52kkc6-cabal-fmt-0.1.12-bin/bin:/nix/store/7vdk4wsn6sv7g1in5mksdilkc9rfh9x0-cabal-install-3.10.3.0/bin:/nix/store/fmjy7afyrjhjd2gpgljpjq4yaaggy67z-hlint-3.6.1/bin:/nix/store/php4qidg2bxzmm79vpri025bqi0fa889-coreutils-9.5/bin:/nix/store/jjcsr5gs4qanf7ln5c6wgcq4sn75a978-findutils-4.9.0/bin:/nix/store/i34mknsjgrfyy71k2h79gda0bvagzc2j-diffutils-3.10/bin:/nix/store/5zjms21vpxlkbc0qyl5pmj2sidfmzmd7-gnused-4.9/bin:/nix/store/28gpmx3z6ss3znd7fhmrzmvk3x5lnfbk-gnugrep-3.11/bin:/nix/store/8vvkbgmnin1x2jkp7wcb2zg1p0vc4ks9-gawk-5.2.2/bin:/nix/store/rik7p68cq7yzlj5pmfpf4yv6jnrpvlgf-gnutar-1.35/bin:/nix/store/j5chw7v1x3vlmf3wmdpdb5gwh9hl0b80-gzip-1.13/bin:/nix/store/mxcq77rlan82dzpv3cgj0fh6qvv8ncil-bzip2-1.0.8-bin/bin:/nix/store/cdzpn0rdq810aknww3w9fy3wmw9ixr66-gnumake-4.4.1/bin:/nix/store/306znyj77fv49kwnkpxmb0j2znqpa8bj-bash-5.2p26/bin:/nix/store/0lfxbmchigx9vs9qmrlbahcy6nxwfnj1-patch-2.7.6/bin:/nix/store/6i4xxaa812vsbli9jkq4mksdddrk27lw-xz-5.4.6-bin/bin:/nix/store/xx7x1dwybpssfhq8yikvzz38bh3yrq97-file-5.45/bin'
export HOST_PATH
IFS=' 	
'
IN_NIX_SHELL='impure'
export IN_NIX_SHELL
LANG='en_US.UTF-8'
export LANG
LD='ld'
export LD
LINENO='76'
LOCALE_ARCHIVE='/nix/store/hmy0ml9nw48c6znk3vn692m1pvk31k54-glibc-locales-2.39-52/lib/locale/locale-archive'
export LOCALE_ARCHIVE
MACHTYPE='x86_64-pc-linux-gnu'
NIX_BINTOOLS='/nix/store/kln7kinji3b7sz8r50h4gn9yy6k1js9a-binutils-wrapper-2.41'
export NIX_BINTOOLS
NIX_BINTOOLS_WRAPPER_TARGET_HOST_x86_64_unknown_linux_gnu='1'
export NIX_BINTOOLS_WRAPPER_TARGET_HOST_x86_64_unknown_linux_gnu
NIX_BUILD_CORES='20'
export NIX_BUILD_CORES
NIX_CC='/nix/store/9bv7dcvmfcjnmg5mnqwqlq2wxfn8d7yi-gcc-wrapper-13.2.0'
export NIX_CC
NIX_CC_WRAPPER_TARGET_HOST_x86_64_unknown_linux_gnu='1'
export NIX_CC_WRAPPER_TARGET_HOST_x86_64_unknown_linux_gnu
NIX_CFLAGS_COMPILE=' -frandom-seed=582ldh1fcd'
export NIX_CFLAGS_COMPILE
NIX_ENFORCE_NO_NATIVE='1'
export NIX_ENFORCE_NO_NATIVE
NIX_GHC='/nix/store/h8gc7la0nhz0c9fiwslmgpc7l7i91bsj-ghc-9.6.4-with-packages/bin/ghc'
export NIX_GHC
NIX_GHCPKG='/nix/store/h8gc7la0nhz0c9fiwslmgpc7l7i91bsj-ghc-9.6.4-with-packages/bin/ghc-pkg'
export NIX_GHCPKG
NIX_GHC_DOCDIR='/nix/store/h8gc7la0nhz0c9fiwslmgpc7l7i91bsj-ghc-9.6.4-with-packages/share/doc/ghc/html'
export NIX_GHC_DOCDIR
NIX_GHC_LIBDIR='/nix/store/h8gc7la0nhz0c9fiwslmgpc7l7i91bsj-ghc-9.6.4-with-packages/lib/ghc-9.6.4/lib'
export NIX_GHC_LIBDIR
NIX_HARDENING_ENABLE='bindnow format fortify fortify3 pic relro stackprotector strictoverflow'
export NIX_HARDENING_ENABLE
NIX_LDFLAGS='-rpath /home/jonathanl/code/lucid-htmx/lucid/outputs/out/lib  -L/nix/store/j4m3lwhh4x0bzilvi77d512ahry775nq-ncurses-6.4/lib -L/nix/store/kbg5m7fyi1w23fyfmxjhhzcbd577rpg0-libffi-3.4.6/lib -L/nix/store/r20kl3djvc3r5w5a0gwy4d896mn6b22a-elfutils-0.191/lib -L/nix/store/rx6nkd40819acppajq29g1hxa4d9r35f-gmp-with-cxx-6.3.0/lib -L/nix/store/j4m3lwhh4x0bzilvi77d512ahry775nq-ncurses-6.4/lib -L/nix/store/kbg5m7fyi1w23fyfmxjhhzcbd577rpg0-libffi-3.4.6/lib -L/nix/store/r20kl3djvc3r5w5a0gwy4d896mn6b22a-elfutils-0.191/lib -L/nix/store/rx6nkd40819acppajq29g1hxa4d9r35f-gmp-with-cxx-6.3.0/lib'
export NIX_LDFLAGS
NIX_NO_SELF_RPATH='1'
NIX_STORE='/nix/store'
export NIX_STORE
NM='nm'
export NM
OBJCOPY='objcopy'
export OBJCOPY
OBJDUMP='objdump'
export OBJDUMP
OLDPWD=''
export OLDPWD
OPTERR='1'
OSTYPE='linux-gnu'
PATH='/nix/store/h8gc7la0nhz0c9fiwslmgpc7l7i91bsj-ghc-9.6.4-with-packages/bin:/nix/store/nbad47q0m0m9c5xid7zh05hiknwircbp-patchelf-0.15.0/bin:/nix/store/9bv7dcvmfcjnmg5mnqwqlq2wxfn8d7yi-gcc-wrapper-13.2.0/bin:/nix/store/14c6s4xzhy14i2b05s00rjns2j93gzz4-gcc-13.2.0/bin:/nix/store/c2i631h8i5vcs1sqifwxfsazhwrg6wr5-glibc-2.39-52-bin/bin:/nix/store/php4qidg2bxzmm79vpri025bqi0fa889-coreutils-9.5/bin:/nix/store/kln7kinji3b7sz8r50h4gn9yy6k1js9a-binutils-wrapper-2.41/bin:/nix/store/bgcaxhhxswzvmxjbbgvvaximm5hwghz1-binutils-2.41/bin:/nix/store/j4m3lwhh4x0bzilvi77d512ahry775nq-ncurses-6.4/bin:/nix/store/jdd2r3d94zpabmzxyxd4nvw298gqp736-haskell-language-server-2.8.0.0/bin:/nix/store/ydnwlw5lwgpp3mi4di3g8mhv9msq0ws1-aeson-pretty-0.8.10/bin:/nix/store/3xbknfc5c0n8svygx3ssg5rpj5mrm4s8-apply-refact-0.13.0.0/bin:/nix/store/lnp12bydmfwjf19wbnw0xzynq1xx86ad-ghc-9.6.4/bin:/nix/store/2y4palh4vyanc4qyhsizmha9ccw04nnw-floskell-0.11.1/bin:/nix/store/nc3flraclai92s471zmv4a500ipzgiwp-fourmolu-0.14.0.0/bin:/nix/store/1cq4dnb8dpnylrw9n23y51yvninznf8h-ghcide-2.8.0.0/bin:/nix/store/hvyib7r7sgdka9yja9kwayr5visz2y3j-constraints-extras-0.4.0.0/bin:/nix/store/77q7qyvmxnmv3x9q61pkavpx8wm0d9a0-hie-bios-0.14.0/bin:/nix/store/bq0qw04zcgw9925fzachx3swck8arywi-hiedb-0.6.0.0/bin:/nix/store/5krls67y7ixlvxw6bpiz0lh5pprx65nj-lsp-types-2.1.1.0/bin:/nix/store/5chk2nlpaalswsf9nhgvsv96v7cn4lz7-implicit-hie-0.1.4.0/bin:/nix/store/d9x1dz0qh9qp7s44v2k84yhrawsyrg7n-hlint-3.6.1/bin:/nix/store/17grgbpnfrisn0bkwfxix2asbwlwin1a-cpphs-1.20.9.1/bin:/nix/store/9jl0bkz73s7kavljkbf59c2xzszahsp7-hscolour-1.25/bin:/nix/store/sljqwpgx889hdkv6rb4zxkjrpdygyv8x-ormolu-0.7.2.0-bin/bin:/nix/store/zbjd0dqvh8101v65bk08bclx1pgwjq2p-retrie-1.2.3/bin:/nix/store/j6xc5cmwxlyzrrxgd4h3hxgy7i03nky4-stan-0.1.2.1/bin:/nix/store/gm04r104ym6h097cza1yjq434354dj8l-extensions-0.1.0.1/bin:/nix/store/pldgz5252fwmpkh8x19r1wmm1kml8akd-pretty-simple-4.1.2.0/bin:/nix/store/gkjzpyj79g14kwz8qckcvxqq0sgc7iqd-stylish-haskell-0.14.5.0/bin:/nix/store/a6djvp6rn5nkwc1lcd5inazxanvbfnsa-cabal2nix-2.19.1/bin:/nix/store/7w42pb3mbi98g3nc5nn24ad11fsg51sp-ghcid-0.8.9-bin/bin:/nix/store/h7xga24bhjjwxrkcwljnyiakppj643lf-fourmolu-0.14.0.0/bin:/nix/store/ffjh4599brdvpc5lxi0nac5d1m52kkc6-cabal-fmt-0.1.12-bin/bin:/nix/store/7vdk4wsn6sv7g1in5mksdilkc9rfh9x0-cabal-install-3.10.3.0/bin:/nix/store/fmjy7afyrjhjd2gpgljpjq4yaaggy67z-hlint-3.6.1/bin:/nix/store/php4qidg2bxzmm79vpri025bqi0fa889-coreutils-9.5/bin:/nix/store/jjcsr5gs4qanf7ln5c6wgcq4sn75a978-findutils-4.9.0/bin:/nix/store/i34mknsjgrfyy71k2h79gda0bvagzc2j-diffutils-3.10/bin:/nix/store/5zjms21vpxlkbc0qyl5pmj2sidfmzmd7-gnused-4.9/bin:/nix/store/28gpmx3z6ss3znd7fhmrzmvk3x5lnfbk-gnugrep-3.11/bin:/nix/store/8vvkbgmnin1x2jkp7wcb2zg1p0vc4ks9-gawk-5.2.2/bin:/nix/store/rik7p68cq7yzlj5pmfpf4yv6jnrpvlgf-gnutar-1.35/bin:/nix/store/j5chw7v1x3vlmf3wmdpdb5gwh9hl0b80-gzip-1.13/bin:/nix/store/mxcq77rlan82dzpv3cgj0fh6qvv8ncil-bzip2-1.0.8-bin/bin:/nix/store/cdzpn0rdq810aknww3w9fy3wmw9ixr66-gnumake-4.4.1/bin:/nix/store/306znyj77fv49kwnkpxmb0j2znqpa8bj-bash-5.2p26/bin:/nix/store/0lfxbmchigx9vs9qmrlbahcy6nxwfnj1-patch-2.7.6/bin:/nix/store/6i4xxaa812vsbli9jkq4mksdddrk27lw-xz-5.4.6-bin/bin:/nix/store/xx7x1dwybpssfhq8yikvzz38bh3yrq97-file-5.45/bin'
export PATH
PS4='+ '
RANLIB='ranlib'
export RANLIB
READELF='readelf'
export READELF
SIZE='size'
export SIZE
SOURCE_DATE_EPOCH='315532800'
export SOURCE_DATE_EPOCH
STRINGS='strings'
export STRINGS
STRIP='strip'
export STRIP
XDG_DATA_DIRS='/nix/store/h8gc7la0nhz0c9fiwslmgpc7l7i91bsj-ghc-9.6.4-with-packages/share:/nix/store/nbad47q0m0m9c5xid7zh05hiknwircbp-patchelf-0.15.0/share'
export XDG_DATA_DIRS
__structuredAttrs=''
export __structuredAttrs
_substituteStream_has_warned_replace_deprecation='false'
buildInputs='/nix/store/jdd2r3d94zpabmzxyxd4nvw298gqp736-haskell-language-server-2.8.0.0 /nix/store/a6djvp6rn5nkwc1lcd5inazxanvbfnsa-cabal2nix-2.19.1 /nix/store/hi5s4f93nbr9yn56w6gacq4jcmpb7svm-ghcid-0.8.9 /nix/store/h7xga24bhjjwxrkcwljnyiakppj643lf-fourmolu-0.14.0.0 /nix/store/dqaidvk2pg17rp0a39si367zjsas7lmh-cabal-fmt-0.1.12 /nix/store/7vdk4wsn6sv7g1in5mksdilkc9rfh9x0-cabal-install-3.10.3.0 /nix/store/fmjy7afyrjhjd2gpgljpjq4yaaggy67z-hlint-3.6.1'
export buildInputs
builder='/nix/store/306znyj77fv49kwnkpxmb0j2znqpa8bj-bash-5.2p26/bin/bash'
export builder
cmakeFlags=''
export cmakeFlags
configureFlags=''
export configureFlags
defaultBuildInputs=''
defaultNativeBuildInputs='/nix/store/nbad47q0m0m9c5xid7zh05hiknwircbp-patchelf-0.15.0 /nix/store/bq6xbl9cq6hkcn65mz2fzc2k38xiv87h-update-autotools-gnu-config-scripts-hook /nix/store/h9lc1dpi14z7is86ffhl3ld569138595-audit-tmpdir.sh /nix/store/m54bmrhj6fqz8nds5zcj97w9s9bckc9v-compress-man-pages.sh /nix/store/wgrbkkaldkrlrni33ccvm3b6vbxzb656-make-symlinks-relative.sh /nix/store/5yzw0vhkyszf2d179m0qfkgxmp5wjjx4-move-docs.sh /nix/store/fyaryjvghbkpfnsyw97hb3lyb37s1pd6-move-lib64.sh /nix/store/kd4xwxjpjxi71jkm6ka0np72if9rm3y0-move-sbin.sh /nix/store/pag6l61paj1dc9sv15l7bm5c17xn5kyk-move-systemd-user-units.sh /nix/store/jivxp510zxakaaic7qkrb7v1dd2rdbw9-multiple-outputs.sh /nix/store/ilaf1w22bxi6jsi45alhmvvdgy4ly3zs-patch-shebangs.sh /nix/store/cickvswrvann041nqxb0rxilc46svw1n-prune-libtool-files.sh /nix/store/xyff06pkhki3qy1ls77w10s0v79c9il0-reproducible-builds.sh /nix/store/ngg1cv31c8c7bcm2n8ww4g06nq7s4zhm-set-source-date-epoch-to-latest.sh /nix/store/wmknncrif06fqxa16hpdldhixk95nds0-strip.sh /nix/store/9bv7dcvmfcjnmg5mnqwqlq2wxfn8d7yi-gcc-wrapper-13.2.0'
depsBuildBuild=''
export depsBuildBuild
depsBuildBuildPropagated=''
export depsBuildBuildPropagated
depsBuildTarget=''
export depsBuildTarget
depsBuildTargetPropagated=''
export depsBuildTargetPropagated
depsHostHost=''
export depsHostHost
depsHostHostPropagated=''
export depsHostHostPropagated
depsTargetTarget=''
export depsTargetTarget
depsTargetTargetPropagated=''
export depsTargetTargetPropagated
doCheck=''
export doCheck
doInstallCheck=''
export doInstallCheck
dontAddDisableDepTrack='1'
export dontAddDisableDepTrack
declare -a envBuildBuildHooks=()
declare -a envBuildHostHooks=()
declare -a envBuildTargetHooks=()
declare -a envHostHostHooks=('ccWrapper_addCVars' 'bintoolsWrapper_addLDVars' )
declare -a envHostTargetHooks=('ccWrapper_addCVars' 'bintoolsWrapper_addLDVars' )
declare -a envTargetTargetHooks=()
declare -a fixupOutputHooks=('if [ -z "${dontPatchELF-}" ]; then patchELF "$prefix"; fi' 'if [[ -z "${noAuditTmpdir-}" && -e "$prefix" ]]; then auditTmpdir "$prefix"; fi' 'if [ -z "${dontGzipMan-}" ]; then compressManPages "$prefix"; fi' '_moveLib64' '_moveSbin' '_moveSystemdUserUnits' 'patchShebangsAuto' '_pruneLibtoolFiles' '_doStrip' )
guess='20'
initialPath='/nix/store/php4qidg2bxzmm79vpri025bqi0fa889-coreutils-9.5 /nix/store/jjcsr5gs4qanf7ln5c6wgcq4sn75a978-findutils-4.9.0 /nix/store/i34mknsjgrfyy71k2h79gda0bvagzc2j-diffutils-3.10 /nix/store/5zjms21vpxlkbc0qyl5pmj2sidfmzmd7-gnused-4.9 /nix/store/28gpmx3z6ss3znd7fhmrzmvk3x5lnfbk-gnugrep-3.11 /nix/store/8vvkbgmnin1x2jkp7wcb2zg1p0vc4ks9-gawk-5.2.2 /nix/store/rik7p68cq7yzlj5pmfpf4yv6jnrpvlgf-gnutar-1.35 /nix/store/j5chw7v1x3vlmf3wmdpdb5gwh9hl0b80-gzip-1.13 /nix/store/mxcq77rlan82dzpv3cgj0fh6qvv8ncil-bzip2-1.0.8-bin /nix/store/cdzpn0rdq810aknww3w9fy3wmw9ixr66-gnumake-4.4.1 /nix/store/306znyj77fv49kwnkpxmb0j2znqpa8bj-bash-5.2p26 /nix/store/0lfxbmchigx9vs9qmrlbahcy6nxwfnj1-patch-2.7.6 /nix/store/6i4xxaa812vsbli9jkq4mksdddrk27lw-xz-5.4.6-bin /nix/store/xx7x1dwybpssfhq8yikvzz38bh3yrq97-file-5.45'
installPhase='echo $nativeBuildInputs $buildInputs > $out'
export installPhase
mesonFlags=''
export mesonFlags
name='lucid-htmx-env'
export name
nativeBuildInputs='/nix/store/h8gc7la0nhz0c9fiwslmgpc7l7i91bsj-ghc-9.6.4-with-packages'
export nativeBuildInputs
out='/home/jonathanl/code/lucid-htmx/lucid/outputs/out'
export out
outputBin='out'
outputDev='out'
outputDevdoc='REMOVE'
outputDevman='out'
outputDoc='out'
outputInclude='out'
outputInfo='out'
outputLib='out'
outputMan='out'
outputs='out'
export outputs
patches=''
export patches
phases='installPhase'
export phases
pkg='/nix/store/9bv7dcvmfcjnmg5mnqwqlq2wxfn8d7yi-gcc-wrapper-13.2.0'
declare -a pkgsBuildBuild=()
declare -a pkgsBuildHost=('/nix/store/h8gc7la0nhz0c9fiwslmgpc7l7i91bsj-ghc-9.6.4-with-packages' '/nix/store/p6rzd91m5i5m5yayvgd5x40ria6lrzpd-blaze-builder-0.4.2.3' '/nix/store/c66q35kk7q7z55m8pyfg5m40yivld0yi-hashable-1.4.4.0' '/nix/store/96yvfrbr1kz9sa7paf5nb0rxsmxh3xg7-os-string-2.0.2.2' '/nix/store/hjjnm5njc5dczcdk756afm4ylg2l2n20-mmorph-1.2.0' '/nix/store/m7mg23yw8wdwh5ksw1afha4dvi91d925-transformers-compat-0.7.2' '/nix/store/nbad47q0m0m9c5xid7zh05hiknwircbp-patchelf-0.15.0' '/nix/store/bq6xbl9cq6hkcn65mz2fzc2k38xiv87h-update-autotools-gnu-config-scripts-hook' '/nix/store/h9lc1dpi14z7is86ffhl3ld569138595-audit-tmpdir.sh' '/nix/store/m54bmrhj6fqz8nds5zcj97w9s9bckc9v-compress-man-pages.sh' '/nix/store/wgrbkkaldkrlrni33ccvm3b6vbxzb656-make-symlinks-relative.sh' '/nix/store/5yzw0vhkyszf2d179m0qfkgxmp5wjjx4-move-docs.sh' '/nix/store/fyaryjvghbkpfnsyw97hb3lyb37s1pd6-move-lib64.sh' '/nix/store/kd4xwxjpjxi71jkm6ka0np72if9rm3y0-move-sbin.sh' '/nix/store/pag6l61paj1dc9sv15l7bm5c17xn5kyk-move-systemd-user-units.sh' '/nix/store/jivxp510zxakaaic7qkrb7v1dd2rdbw9-multiple-outputs.sh' '/nix/store/ilaf1w22bxi6jsi45alhmvvdgy4ly3zs-patch-shebangs.sh' '/nix/store/cickvswrvann041nqxb0rxilc46svw1n-prune-libtool-files.sh' '/nix/store/xyff06pkhki3qy1ls77w10s0v79c9il0-reproducible-builds.sh' '/nix/store/ngg1cv31c8c7bcm2n8ww4g06nq7s4zhm-set-source-date-epoch-to-latest.sh' '/nix/store/wmknncrif06fqxa16hpdldhixk95nds0-strip.sh' '/nix/store/9bv7dcvmfcjnmg5mnqwqlq2wxfn8d7yi-gcc-wrapper-13.2.0' '/nix/store/kln7kinji3b7sz8r50h4gn9yy6k1js9a-binutils-wrapper-2.41' )
declare -a pkgsBuildTarget=()
declare -a pkgsHostHost=('/nix/store/j4m3lwhh4x0bzilvi77d512ahry775nq-ncurses-6.4' '/nix/store/kbg5m7fyi1w23fyfmxjhhzcbd577rpg0-libffi-3.4.6' '/nix/store/r20kl3djvc3r5w5a0gwy4d896mn6b22a-elfutils-0.191' '/nix/store/rx6nkd40819acppajq29g1hxa4d9r35f-gmp-with-cxx-6.3.0' )
declare -a pkgsHostTarget=('/nix/store/jdd2r3d94zpabmzxyxd4nvw298gqp736-haskell-language-server-2.8.0.0' '/nix/store/cx7fyyzahzhwfnpb039f2r75hi90ql1v-aeson-2.1.2.1' '/nix/store/vkbvznx3lqm7rhw0v7bfhq7a2cm74ywa-attoparsec-0.14.4' '/nix/store/nk4bck9gjfr588bran964r0z4sbfx2s8-scientific-0.3.7.0' '/nix/store/c66q35kk7q7z55m8pyfg5m40yivld0yi-hashable-1.4.4.0' '/nix/store/96yvfrbr1kz9sa7paf5nb0rxsmxh3xg7-os-string-2.0.2.2' '/nix/store/kvx7qcjmnq4jk9nslmdn2nyxaygf0qzk-integer-logarithms-1.0.3.1' '/nix/store/rxlwdpx6xkk90607r8qvg7mdfp7sf77x-primitive-0.8.0.0' '/nix/store/b5kdgbf9xaxxbb0ixgjffzx3vbnjqn8x-base-compat-batteries-0.13.1' '/nix/store/lfpqsw8i265z1s1dgyw0x9dv28xn3is8-base-compat-0.13.1' '/nix/store/di64lvpg6j0872d5xsvw06gdl324x2x2-data-fix-0.3.3' '/nix/store/6rll90nr2l7x49768b81cw7r25622l00-dlist-1.0' '/nix/store/ns5iw9bq13sgn8dcjm9yab5lxhbmb4km-generically-0.1.1' '/nix/store/06rysx5jrqrnm7dxwf8qyfla364iaqjg-indexed-traversable-0.1.3' '/nix/store/y9hzyzqr6yrpmw9wff33bkqz3scdqv8h-OneTuple-0.4.2' '/nix/store/h03fhg169f4r8lb8s0qwpkl3isjha6vw-QuickCheck-2.14.3' '/nix/store/lal9aa07fni19xnl53hr6391fbaw5a8v-random-1.2.1.2' '/nix/store/2c2shwwkshw43hpzy7q9n1d8y7hl7178-splitmix-0.1.0.5' '/nix/store/2c2shwwkshw43hpzy7q9n1d8y7hl7178-splitmix-0.1.0.5' '/nix/store/nl2l4m5sv0l3dfkmhcdncvcr6yqapgfa-semialign-1.3' '/nix/store/a3bsjxrp05l3764clp1z31siphpy3yi8-indexed-traversable-instances-0.1.1.2' '/nix/store/a2cxcxd7sl3ny0z9ai219l7azqs63zyr-tagged-0.8.8' '/nix/store/ixpkkmsg002ifa6jrh39sy2fmhl0p517-unordered-containers-0.2.20' '/nix/store/yy9cdxx3c2cizynxvks1w73m3d2880a6-vector-0.13.1.0' '/nix/store/infz4hhggpap0fxzqkn4r95ncjad13ny-vector-stream-0.1.0.1' '/nix/store/mkcdhing9cibpx83bkdb93ghz62xgbr0-semigroupoids-6.0.1' '/nix/store/2plvdngyrbhplym00nm167xa7c4swdlz-base-orphans-0.9.2' '/nix/store/c4pqsqibddr8lai58rblk82q7b9ld5ms-bifunctors-5.6.2' '/nix/store/j0q3vyz0ddkrwjndhim2bpiqgfxp3giq-assoc-1.1.1' '/nix/store/p7402nnw6qkqz3iz04jy0whwm28b8fwm-comonad-5.0.8' '/nix/store/rby40s7a2xi6xxdm7fs7ssdn27zkbj8w-distributive-0.6.2.1' '/nix/store/m7mg23yw8wdwh5ksw1afha4dvi91d925-transformers-compat-0.7.2' '/nix/store/94jxscwz3kcnfmcfji76kfkrwjzw87c3-th-abstraction-0.5.0.0' '/nix/store/dkg02031mdwpipkbfv65rzznh4lz9h9a-contravariant-1.5.5' '/nix/store/l38xl5v6yzhrz44az98z341dvgzh125k-StateVar-1.2.2' '/nix/store/f2f40kca040i1xldkwz4ncxn7xmkmkqw-these-1.2' '/nix/store/702ij2v8h7mx62xys77icnr13snqj2cw-strict-0.5' '/nix/store/cqssfksgf4fsvyrc5ax99vc5p40ql706-text-short-0.1.6' '/nix/store/lh1jgis37zjqi26d7sn5a6svizhac9by-time-compat-1.9.6.1' '/nix/store/9v23waqqfd7yn7m8ji8gnblvchnzyzw0-uuid-types-1.0.5.1' '/nix/store/l9nv5lxdaag3p2miq8mgdjjdrj8kbvpm-witherable-0.4.2' '/nix/store/ydnwlw5lwgpp3mi4di3g8mhv9msq0ws1-aeson-pretty-0.8.10' '/nix/store/60j5hmdip1a7w9g9bhd59g09f7ddjgmf-attoparsec-aeson-2.1.0.0' '/nix/store/rnblcpg51hzgm9ywzyyg01fzwcmqrv0y-cmdargs-0.10.22' '/nix/store/3xbknfc5c0n8svygx3ssg5rpj5mrm4s8-apply-refact-0.13.0.0' '/nix/store/4xd1nmm9rxqyxw1k7vwajrw3ixdcshbf-extra-1.7.16' '/nix/store/7yj0gnjb96rbsinxwfh7fgwy49yrbl52-clock-0.8.4' '/nix/store/wrd5n9h2vrj050qxfhrxb9x6s5qa7nh8-filemanip-0.3.6.3' '/nix/store/gs0y4j4cjaj23n2rz4ir9kvxf6ij2vrl-unix-compat-0.7.1' '/nix/store/lnp12bydmfwjf19wbnw0xzynq1xx86ad-ghc-9.6.4' '/nix/store/hgjbixkq2m1nv4hbpr46b2sh7n6xm44d-ghc-exactprint-1.7.1.0' '/nix/store/al4qwf4hfi2ixybl27lg0bxxffxnkanm-data-default-0.7.1.1' '/nix/store/mybxhc54il1d61hzikcb5kcyb0npj0x4-data-default-class-0.1.2.0' '/nix/store/575h0jmq9m6i0a2s47fmkv4djawg1d4x-data-default-instances-containers-0.0.1' '/nix/store/g82f8fwak9d57fbajqnx8djq0wjkn4jx-data-default-instances-dlist-0.0.1' '/nix/store/5p7f6dnr6p0k6a4va5pfkwf7kb5wz3wn-data-default-instances-old-locale-0.0.1' '/nix/store/fjhxs4zki6066i463fkg049bp2sjfdc8-old-locale-1.0.0.7' '/nix/store/apc8ll4623didxhlv0wchb04sk7hvvlm-fail-4.9.0.0' '/nix/store/0ckckrvda8rs4w6k8mgml68bkfsnksg7-free-5.2' '/nix/store/964rsd47xl1xldjix7ah5rljxshkj430-profunctors-5.6.2' '/nix/store/fd8s5vmgbx86r8bcpb8iixc6vz76hddy-transformers-base-0.4.6' '/nix/store/zcv8hym1r6mmhcw951z0gnqvh26l3pgj-ordered-containers-0.2.3' '/nix/store/l02c6l6c8fd47yd48qsiphyzj3803rj6-syb-0.7.2.4' '/nix/store/jqgjybhhrdkcjdjvsrcvpyjrsgcskdlj-refact-0.3.0.2' '/nix/store/jyzwnfban8smx2aybqzc1031pcrz8lcw-uniplate-1.6.13' '/nix/store/x853sapg0jw61ib7idm66a84ivfzkwnw-ghc-paths-0.1.0.12' '/nix/store/1gvj6j2nbk5b666bvqbk0xpsrwsynba1-optparse-applicative-0.18.1.0' '/nix/store/azizyarir85m4c1slg8fzapys1cqqldh-prettyprinter-1.7.1' '/nix/store/2m1w4xv13m3sby8pgd1skrnff98axhnc-prettyprinter-ansi-terminal-1.1.3' '/nix/store/nmgp2qx5nqpzpgnf5ak5fxs28ly5p1hm-ansi-terminal-1.0.2' '/nix/store/02jg60m0zb90fdnh2ppckpj25jvv2847-ansi-terminal-types-0.11.5' '/nix/store/70s6kal7qd7mnbc92mlsr4v8mcidimdl-colour-2.3.6' '/nix/store/70s6kal7qd7mnbc92mlsr4v8mcidimdl-colour-2.3.6' '/nix/store/0kvfl1zznb32diics7fasfrqf4i8805w-Diff-0.4.1' '/nix/store/2y4palh4vyanc4qyhsizmha9ccw04nnw-floskell-0.11.1' '/nix/store/0xibc7lwsrqxxrfjlcwyn9fbaxfk2j4f-haskell-src-exts-1.23.1' '/nix/store/0s4l2vq0cagj671ya51qaaa9drxmsmlw-monad-dijkstra-0.1.1.5' '/nix/store/vxc907sq0y7z2byvkhni0pw8n6dd6vfx-psqueues-0.2.8.0' '/nix/store/qfsfzs86m07pxq06m8prfva3ajj6ggwv-ansi-wl-pprint-1.0.2' '/nix/store/qgvm93lnaz4qjrjl7fhdji5xdazqv388-prettyprinter-compat-ansi-wl-pprint-1.0.2' '/nix/store/mcjnsg292a1y2xgzpzl7341hby702dha-foldl-1.4.16' '/nix/store/nc3flraclai92s471zmv4a500ipzgiwp-fourmolu-0.14.0.0' '/nix/store/za5rynv6vy8rhynw1npvaxmazls919vc-file-embed-0.0.16.0' '/nix/store/37vk3hd7vbmz31rh7nggbg7w0rg6wdsz-ghc-lib-parser-9.6.5.20240423' '/nix/store/cfwmg687r9rd7y298pdyl6afl3jqj1jj-megaparsec-9.5.0' '/nix/store/r4h708z31b25x617z98zmpdszy0ykcj3-case-insensitive-1.2.1.0' '/nix/store/h1mi8yqxcdlns471blspfi7lkiamhcxs-parser-combinators-1.3.0' '/nix/store/s6fbrmhlk2zkkipfk5gl1g7r8pj3zfjf-MemoTrie-0.6.11' '/nix/store/kml4f5zhkah6fbfqwwdxcvzyzkr8s324-newtype-generics-0.6.2' '/nix/store/jg1dplap2bnlmqa3blvn6w3r22mg7n7d-yaml-0.11.11.2' '/nix/store/9if1sc0y2pg3kd5ql29pk6vw3vh3mwg2-conduit-1.3.5' '/nix/store/painwn2w914jvz9bykrzzkskwmrb0ndv-mono-traversable-1.0.17.0' '/nix/store/j7syprlg5fhqnplhy9mmpb75k33qllrw-split-0.2.5' '/nix/store/44ac0f914wkanw4lz1250zhdhi1h379q-vector-algorithms-0.9.0.1' '/nix/store/rfn8dgiqhvs5f9qw4an6s1bg7b9iyh5a-bitvec-1.1.5.0' '/nix/store/qjlxhar2i2d1mqr2jxfan8wj0b3k5bbg-resourcet-1.3.0' '/nix/store/4mnhl3p9iimzgbikkj7wag934y4c1r25-unliftio-core-0.2.1.0' '/nix/store/4mnhl3p9iimzgbikkj7wag934y4c1r25-unliftio-core-0.2.1.0' '/nix/store/z1c3p5lfi3wv4jbkkzpd58hc2j5kq5sg-libyaml-0.1.4' '/nix/store/ikg9mxayaai6d7gsffkyw30hl7s0qgcb-libyaml-clib-0.2.5' '/nix/store/hbprihn2nc9sibarpg100vwfl1yrqlk3-th-env-0.1.1' '/nix/store/m6ziwcwr75awm0fndvxq8nd5c3ax7hkv-th-compat-0.1.5' '/nix/store/2bhxqd7j2lbmmcp3a25vnq0y3d469j41-fuzzy-0.1.1.0' '/nix/store/ncpanw3n5ffbh4g6yl0sj2xy1xx7sspz-monoid-subclasses-1.2.5' '/nix/store/rmibm39ngfh35hxla6znksaxh3k0r0c0-commutative-semigroups-0.1.1.0' '/nix/store/bj659ndvxlkcpcl7h0nqd9d7wkig1qiw-primes-0.2.1.0' '/nix/store/ig34zhhi1wl13x8agczq3awakx6pafbc-ghc-lib-parser-ex-9.6.0.2' '/nix/store/1cq4dnb8dpnylrw9n23y51yvninznf8h-ghcide-2.8.0.0' '/nix/store/f4xrab39gwb5cjh5535m9sls74qqgrjf-async-2.2.5' '/nix/store/948bnyl6hq8izxa26pj3lwz2vfcmdjlr-base16-bytestring-1.0.2.0' '/nix/store/nqn9kv90pjlvrcm7z8ql7lnjrss0qgw1-co-log-core-0.3.2.1' '/nix/store/8d02a84wgavn8j10kn3psjdz274rbk6f-cryptohash-sha1-0.11.101.0' '/nix/store/k5fz2ragm6v772vzz50d2j2q2w23jw65-dependent-map-0.4.0.0' '/nix/store/hvyib7r7sgdka9yja9kwayr5visz2y3j-constraints-extras-0.4.0.0' '/nix/store/c5dl8d4q9bwlg52rm60sj524niw03gh3-constraints-0.14.2' '/nix/store/8ycnpf09p7yjv5cc347rk9v5zrgl7kf0-boring-0.2.1' '/nix/store/qgfdxvnd678ryn97511fbski52s6kfsx-dependent-sum-0.7.2.0' '/nix/store/xfaav3jinm463k9cys6ga6n4ga0m83qi-some-1.0.6' '/nix/store/59xq843fg9h4gzdzv27smnqxwpnjdssj-enummapset-0.7.2.0' '/nix/store/423gf4gd4vl6jqr1wb60kgy1msnbim3q-fingertree-0.1.5.0' '/nix/store/1g4jv50y8xq2cqjqnpp93aagg432ml0h-focus-1.0.3.2' '/nix/store/k81aka9gkq6cmiyn53jdmcxw1g5hjs72-ghc-check-0.5.0.8' '/nix/store/pgx7gz66kqjga6v79sgj8wr7560nshb9-safe-exceptions-0.1.7.4' '/nix/store/6ygy4gpbq8674qvwf6rs55hs0pzx5fp0-ghc-trace-events-0.1.2.8' '/nix/store/3xkx1pks5ihxcp60b6mrsjc2pjl5gd69-Glob-0.10.2' '/nix/store/mfjv8pmzgjba0kkcnm6l7a5crk50hc0m-haddock-library-1.11.0' '/nix/store/77q7qyvmxnmv3x9q61pkavpx8wm0d9a0-hie-bios-0.14.0' '/nix/store/zb9si0vmzgf8v3vsih2ih5ngrhb20y6g-conduit-extra-1.3.6' '/nix/store/vv8h4sqchp1h23pcplwickfiwld42z6n-network-3.1.4.0' '/nix/store/gjwsh319s3bfj8d8i5jfz4v4afq96jsa-streaming-commons-0.2.2.6' '/nix/store/cnkp1hyszv85xx54ydlzrjhsb79hdlrz-zlib-0.6.3.0' '/nix/store/9r1d98vl9ppk2k7k80kv7fn22419x5z7-typed-process-0.2.11.1' '/nix/store/9rkg0xf9vvx13xwfgns5qaxsqjwpikix-temporary-1.3' '/nix/store/hngxjqgsjggkk8p2mqx5m25nblpcf7fl-hie-compat-0.3.1.2' '/nix/store/bq0qw04zcgw9925fzachx3swck8arywi-hiedb-0.6.0.0' '/nix/store/fnjyh8c30in2836g7hkwkgcfkb3g0lny-algebraic-graphs-0.7' '/nix/store/3lr647l7yqjz5kjjknpkmqld9dbh0iqk-lucid-2.11.20230408' '/nix/store/p6rzd91m5i5m5yayvgd5x40ria6lrzpd-blaze-builder-0.4.2.3' '/nix/store/hjjnm5njc5dczcdk756afm4ylg2l2n20-mmorph-1.2.0' '/nix/store/x4f3idz3v7339g7931kfdw0wwjsi2zvz-sqlite-simple-0.4.19.0' '/nix/store/ir6d174h3d239yl077mrirj2sd20byb0-blaze-textual-0.2.3.1' '/nix/store/bdw73gk90faf0kwkh9gmbsmzp74dl5a2-direct-sqlite-2.3.29' '/nix/store/rhpbsqknshhz30p045jpnn80qcnqsb5c-Only-0.1' '/nix/store/b3q8wgha6xql0byd95xk3xm9nl9wa870-terminal-size-0.3.4' '/nix/store/c4dd48i194bnlps0rxy770ylw74r6br0-hls-graph-2.8.0.0' '/nix/store/gmqyr1lja20sny9x5p69z7bw2qc4hrfv-js-dgtable-0.5.2' '/nix/store/9z4wdvsplr97maawg11n1yxnxjbi23vy-js-flot-0.8.3' '/nix/store/1gy09crgjbjl70wr0xrf8y4q2icd14md-js-jquery-3.3.1' '/nix/store/v9mvaapd06i24ygg8vfvf3vqk6r3jk8f-list-t-1.0.5.7' '/nix/store/yzd5ifiqgp89phhiywjs03wlgzqcq08a-logict-0.8.1.0' '/nix/store/8imjjcddcfxaa9axiyqjmzd3xcvnvw3r-monad-control-1.0.3.1' '/nix/store/q00arw5jilq0j7fn0cvylljjlbdy3nl5-stm-containers-1.2.1' '/nix/store/7qka6lm9zcdbbcy64ds2x73j5zrkgxrp-deferred-folds-0.9.18.6' '/nix/store/8ljb51k056jydjhiq0sn8hjwgmvp9hm2-stm-hamt-1.2.1' '/nix/store/wc52g0fw5mpi112m7x7f422fdfrj19fb-primitive-extras-0.10.2' '/nix/store/7cysdi1md57xqlcf3i39p6kxbi2plagq-cereal-0.5.8.3' '/nix/store/h49f0p5hfy0k4awi41qfka1v4k9czq93-primitive-unlifted-2.1.0.0' '/nix/store/7jgg7y2hlrhc943000xybjf1lrs8mprl-unliftio-0.2.25.0' '/nix/store/bmxgggcia557s0krynmqpz97gcbirfv7-hls-plugin-api-2.8.0.0' '/nix/store/5asar2p260jnwwvnw0ffmcrwa0sn8gh7-hw-fingertree-0.1.2.1' '/nix/store/8yc8hv197qzw071w4wrkhkmzdnp4pvhd-hw-prim-0.6.3.2' '/nix/store/sjxw26ka66sba3saxzg0pzij9sy1dwb6-mmap-0.5.9' '/nix/store/yysfa0bxlfzwis3479iqncqpi2ij827l-lens-5.2.3' '/nix/store/dlrj9w9y5dbd95ym4przlgy2a10ckvb6-call-stack-0.4.0' '/nix/store/mrcklhfbqd7jm6pmibwql2axj3j1y1lh-kan-extensions-5.2.6' '/nix/store/g7fd8a8q9i6wn1vb2h7gdl7flhajdyb1-adjunctions-4.4.2' '/nix/store/ajpw7zk47rdxm00347p8k6f329n7dgaa-semigroups-0.20' '/nix/store/5srdwgamliz77234asxxij45m670rhl2-void-0.7.3' '/nix/store/8aj8n76c4zn6nhyzjfhw3r4q97jjjg41-invariant-0.6.3' '/nix/store/pwbb97kfb80wk6ns1safv7rz2799wvwp-parallel-3.2.2.0' '/nix/store/5yq6lr87vpwrir2l2sh4q1ahszg6wdyq-reflection-2.1.8' '/nix/store/pxbhkn83ya7vm35935m9rf34dla1dhz7-lens-aeson-1.2.3' '/nix/store/4x09270371ypprjmsig3niq8a5fjkjkj-lsp-2.4.0.0' '/nix/store/5krls67y7ixlvxw6bpiz0lh5pprx65nj-lsp-types-2.1.1.0' '/nix/store/a1figzqqn8zf3bmp13qkxc34rgg3ifi8-generic-arbitrary-1.0.1' '/nix/store/gzqaih4w21yc1hvy41gdvmgiq6jlim75-mod-0.2.0.1' '/nix/store/z94zbrgqi2j7giryr2d0sl0x8y0h6gvs-semirings-0.6' '/nix/store/vahl92b0n66bys87c7ryn5bpamwjq1j0-network-uri-2.6.4.2' '/nix/store/dsrsrvcl6lsrwxn9zw8i5sbdk5j4ik8m-quickcheck-instances-0.3.30' '/nix/store/5fmkb0d4xkmvm00jxi1gxwnfa16xymbq-old-time-1.1.0.4' '/nix/store/wczx1i5zjbqsdx256jcsp6ipxxdyc260-row-types-1.0.1.2' '/nix/store/ni0k7z318dylkgh3z2zw5jqg40fp2zk0-generic-lens-2.2.2.0' '/nix/store/ar89q15nq3gh8lbhq4mjqigcwxj8n50b-generic-lens-core-2.2.1.0' '/nix/store/xjrpi3q1igwnhj19h9blr1x6n5imdq3i-indexed-profunctors-0.1.1.1' '/nix/store/mjh4rviwx66hymbvhcz2z9msrxpmsfsz-safe-0.3.21' '/nix/store/ggsnpv4s2v6wms595jwibj1mvbq40g24-regex-1.1.0.2' '/nix/store/vca306xvwr0x7g2nhrl7rnvzxa54v5yx-regex-base-0.94.0.2' '/nix/store/hhacbkbfd89p0zykpv84ia6s6dqqw1il-regex-pcre-builtin-0.95.2.3.8.44' '/nix/store/590jqcy9mwx4jc7gsl66wn5606nz97k4-regex-tdfa-1.3.2.2' '/nix/store/1kgf4bns4iys4iblh28a7zz4w1mlfxcz-time-locale-compat-0.1.1.5' '/nix/store/lvzqrv6xx2sawxxzpgfdb1q8s0y40sra-utf8-string-1.0.2' '/nix/store/rqalb9sz07lqjhbh4iyfrgvw6diczdy4-sorted-list-0.2.2.0' '/nix/store/rhx4r9irknwdvc12p9iy9liw0m3ayx74-text-rope-0.2' '/nix/store/wphkmmdgyq2p28n4i2zicqg8xymi7jzh-uuid-1.3.15' '/nix/store/k7058v4df0ka8ch9fwqmrgcfh9p1fy8b-cryptohash-md5-0.11.101.0' '/nix/store/dfah8smrc46i824im6li0al540ghzsnh-entropy-0.4.1.10' '/nix/store/mvk108p7b3s929dhnwjb93mp0pqbfd5a-network-info-0.2.1' '/nix/store/cry2j5khydmxm1w6sxl43fi684147yk5-opentelemetry-0.8.0' '/nix/store/5chk2nlpaalswsf9nhgvsv96v7cn4lz7-implicit-hie-0.1.4.0' '/nix/store/9a5wb5d5j2k94b7jg78q01prgz0d98ig-filepattern-0.1.3' '/nix/store/9a5wb5d5j2k94b7jg78q01prgz0d98ig-filepattern-0.1.3' '/nix/store/fnr2j2s96d2p14wx5chj1ydjyscwiqfs-lsp-test-0.17.0.0' '/nix/store/i681bgh4qx8rrmdgfw1129fr7b0cag5m-conduit-parse-0.2.1.1' '/nix/store/x8gkgfjzkfz7wb6pfds394hkniazj8ff-parsers-0.12.11' '/nix/store/93p4bhph52r4gbr489kvqcdzp0aircxz-charset-0.3.10' '/nix/store/qdrbclffvxnz8fnaf1g2g7i1a362hfzn-tasty-hunit-0.10.1' '/nix/store/s3z2a4rk00cpqj136hz5s0b9c6ms4l83-tasty-1.4.3' '/nix/store/790v1xcfv53qc6izkharf8nminvrxic9-gitrev-1.3.1' '/nix/store/gz5qcdqvmsrzmyrfhxx3591x4xnwnwqx-githash-0.1.7.0' '/nix/store/d9x1dz0qh9qp7s44v2k84yhrawsyrg7n-hlint-3.6.1' '/nix/store/17grgbpnfrisn0bkwfxix2asbwlwin1a-cpphs-1.20.9.1' '/nix/store/1vwyanc6ip04dcam8gssdyk1zpbi5zcj-polyparse-1.13' '/nix/store/1vwyanc6ip04dcam8gssdyk1zpbi5zcj-polyparse-1.13' '/nix/store/la1a6x35hxq71j8240l692mh4d1m23mr-deriving-aeson-0.2.9' '/nix/store/9jl0bkz73s7kavljkbf59c2xzszahsp7-hscolour-1.25' '/nix/store/y8v78bkfby7jp62vqq2pj7pqi9ll59f2-optparse-simple-0.1.1.4' '/nix/store/i4ywzb86a35flp8ghmxiyqpnk6rsl07z-ormolu-0.7.2.0' '/nix/store/sljqwpgx889hdkv6rb4zxkjrpdygyv8x-ormolu-0.7.2.0-bin' '/nix/store/qbyb9c0gja1y29lcns7x65ggf48m3l99-process-extras-0.7.4' '/nix/store/x0arzbkmq3x9427myahj78lf5pgnzzhx-generic-deriving-1.14.5' '/nix/store/kxm9ij8jxlqpdxj3v9fl2mf1ny52kn9v-ListLike-4.7.8.2' '/nix/store/qbkhd9idq37xhrqgx1vx3k7c3xv715qg-fmlist-0.9.4' '/nix/store/11k8j2758swp6z104g196wp8vl7h3n8m-regex-applicative-0.3.4' '/nix/store/k92agn4ndmr5431wc01csr5dsckx0xk0-filtrable-0.1.6.0' '/nix/store/zbjd0dqvh8101v65bk08bclx1pgwjq2p-retrie-1.2.3' '/nix/store/d0jky5xv9gh4qxld2msqb3vdig3srzgs-random-shuffle-0.0.4' '/nix/store/vyhz1xls11k0k8zzm2hfs9vibhjxcg0a-MonadRandom-0.6' '/nix/store/j6xc5cmwxlyzrrxgd4h3hxgy7i03nky4-stan-0.1.2.1' '/nix/store/181nli96ydll7c08d7ja81aznbq3rwx1-base64-0.4.2.4' '/nix/store/w14jj39awibrxx686p7gcbz3wbadjxpv-blaze-html-0.9.2.0' '/nix/store/h8v9ymn0mdvvq5sp4l5k4qq7hysyz95q-blaze-markup-0.8.3.0' '/nix/store/5j1nzlgyzhg0k7gnvv9hws8wykgz5h9h-clay-0.14.0' '/nix/store/iih09paqpyb768xjz80yhh0wr7fd6kxj-colourista-0.1.0.2' '/nix/store/k5j7vs8zax7w6nsmy182lgqqs9w6gf1a-dir-traverse-0.2.3.0' '/nix/store/gm04r104ym6h097cza1yjq434354dj8l-extensions-0.1.0.1' '/nix/store/k9vd0n344nhj6422rfdkz40pda62pf53-microaeson-0.1.0.1' '/nix/store/pldgz5252fwmpkh8x19r1wmm1kml8akd-pretty-simple-4.1.2.0' '/nix/store/lp1kzgl3h54ksw2yamvriif3f1ryazin-relude-1.2.1.0' '/nix/store/zz74v57161gm0n6xishahfsg8h4j7822-slist-0.2.1.0' '/nix/store/5594silim2kvj42zx6hvli87zfj0hp1d-tomland-1.3.3.2' '/nix/store/fawng5dr1dz2sppm24aj406maw0d9zc5-validation-selective-0.2.0.0' '/nix/store/7m1ilycr7m60ya9fdmxi7fflwpbrm7vh-selective-0.7.0.1' '/nix/store/x2xawwryfqrh5875y2nkz0qpayaknxq8-trial-0.0.0.0' '/nix/store/qvg07a251fh03yn91l3wc77z5b9md7gc-trial-optparse-applicative-0.0.0.0' '/nix/store/k69n85145p12akmxim1lgfw0x27pxc67-trial-tomland-0.0.0.0' '/nix/store/gkjzpyj79g14kwz8qckcvxqq0sgc7iqd-stylish-haskell-0.14.5.0' '/nix/store/ikq2ai1rsnvkcazd6samr63610fw6668-HsYAML-0.2.1.4' '/nix/store/82fqgfhymwi914lcl21caz861jl70p10-HsYAML-aeson-0.2.0.1' '/nix/store/82fqgfhymwi914lcl21caz861jl70p10-HsYAML-aeson-0.2.0.1' '/nix/store/a6djvp6rn5nkwc1lcd5inazxanvbfnsa-cabal2nix-2.19.1' '/nix/store/hi5s4f93nbr9yn56w6gacq4jcmpb7svm-ghcid-0.8.9' '/nix/store/bhyn6nli5vhcxl6c6rd6y14789cgbpws-ansi-terminal-1.0.2' '/nix/store/bd2jv13zbl7f1piknca0plh4b8fpfwrg-ansi-terminal-types-0.11.5' '/nix/store/9wxl0li5qa11b2195gxjcvsdq6y61rrh-colour-2.3.6' '/nix/store/9wxl0li5qa11b2195gxjcvsdq6y61rrh-colour-2.3.6' '/nix/store/l7hyzcmydnlj420vlbmyn3kh3c2bbdrx-cmdargs-0.10.22' '/nix/store/zj7k8qmk01209dimx1sv3zbr8dd0grnb-extra-1.7.16' '/nix/store/gkn1nm8hddz2yqh1nljhgmi0yj7if4yv-clock-0.8.4' '/nix/store/7aw0a37zx95c2ppip8kr6jfwc8is74la-fsnotify-0.4.1.0' '/nix/store/b06990bvqjn1bdc1vi8nmbargvwz17s9-async-2.2.5' '/nix/store/zca7c0cpglnf1rm2gvjqajgrxx1yn245-hashable-1.4.4.0' '/nix/store/965zh30j7mg3asyb414l6d5g85n813p7-os-string-2.0.2.2' '/nix/store/h4cpjhz5crz9cybqrchb1pbl65nsjvjl-hinotify-0.4.1' '/nix/store/1vq0jr1rrccr5z8z33dh7smx0x46yl08-monad-control-1.0.3.1' '/nix/store/i269f38s91s3c7c406016hkqbbh3rswn-transformers-base-0.4.6' '/nix/store/j9yj2ammh2b22cpx0qhhnnb696i5d5n9-base-orphans-0.9.2' '/nix/store/afjcx0k4jg88gdy3lcgm0s8kr8fh0lic-transformers-compat-0.7.2' '/nix/store/afjcx0k4jg88gdy3lcgm0s8kr8fh0lic-transformers-compat-0.7.2' '/nix/store/vvzl9n3w0dbslac2w0vq6xj0vyj38h51-safe-exceptions-0.1.7.4' '/nix/store/5kb121xpz2p9lqzn5r6da7c1namnjkwn-unix-compat-0.7.1' '/nix/store/ddp6gr0x4nasfp3d5wlwm7dgmyqvsizz-terminal-size-0.3.4' '/nix/store/7w42pb3mbi98g3nc5nn24ad11fsg51sp-ghcid-0.8.9-bin' '/nix/store/h7xga24bhjjwxrkcwljnyiakppj643lf-fourmolu-0.14.0.0' '/nix/store/0bqj633zfqzwpdczzlxzpp8d4g0s2pr8-aeson-2.1.2.1' '/nix/store/5fjzzcfbjcrn6f0ldihch0aaibky7hhp-attoparsec-0.14.4' '/nix/store/0ikb2xaxag9z7f2wc6cvf2vzi3bs0xmy-scientific-0.3.7.0' '/nix/store/0m7x9qarvq1pb24jd5zq5k9z7ja3mj8w-integer-logarithms-1.0.3.1' '/nix/store/vdna3n2qnr0g1l8h289jqk7xnd6flg1b-primitive-0.8.0.0' '/nix/store/dcgl4q926cc766sdjb9lc6ziqz6v3c7i-base-compat-batteries-0.13.1' '/nix/store/lxwxq71c6962cshzz27974981jbglgzk-base-compat-0.13.1' '/nix/store/099adz9wbqhpw40k0l1fad8rrv93gb6x-data-fix-0.3.3' '/nix/store/q44r1bd0awvswl4dnhh4r7jdlysryrmg-dlist-1.0' '/nix/store/4ffhpj79bm5dl17sqkawifxs0svfij7y-generically-0.1.1' '/nix/store/2z8vwqs6s4xsyyagck2xz1rs7mrgccc2-indexed-traversable-0.1.3' '/nix/store/syyvg9i7mzi32yab6nl8b5gv8cmd4fm4-OneTuple-0.4.2' '/nix/store/53km62i2zf2jcyrwak188jyzfqq34f2n-QuickCheck-2.14.3' '/nix/store/y3kl9wip9b9c1mpxf7q4k2jwnh874zm6-random-1.2.1.2' '/nix/store/hqav866h8dqdib13c3yk80bjl6zcf1zf-splitmix-0.1.0.5' '/nix/store/hqav866h8dqdib13c3yk80bjl6zcf1zf-splitmix-0.1.0.5' '/nix/store/w1iikd849qbiz1haycn4i0dnhxk4355g-semialign-1.3' '/nix/store/50rj4j5af7qq31z97sgkcbywgp7bxypi-indexed-traversable-instances-0.1.1.2' '/nix/store/snc0lj8g6bdi4hl625yb15c1r68w4car-tagged-0.8.8' '/nix/store/dpkikmnxl8d5b7dicx0k3hpviyqb30ka-unordered-containers-0.2.20' '/nix/store/6p83505g61wgjvn605nwgqi2lpc32iag-vector-0.13.1.0' '/nix/store/mj0y3n04alw9zqvznnwx1cdydqj3mw5h-vector-stream-0.1.0.1' '/nix/store/xvsxhj9hkp4pql8n9wzxmlm354znbdq8-semigroupoids-6.0.1' '/nix/store/10ls684qhjyv232jvj55mdcb0ipvq2ji-bifunctors-5.6.2' '/nix/store/wf14q19xqf3lh8vh0djsdr995gz3259a-assoc-1.1.1' '/nix/store/0vzlpkn1b610ljy3xz7cqdp574nmi2m6-comonad-5.0.8' '/nix/store/x48z2b7z8c7lw0mfqsnxdgk79f3b48lw-distributive-0.6.2.1' '/nix/store/g4bk1i0jg5pjl9d8g8i8xw2jrrcdj562-th-abstraction-0.5.0.0' '/nix/store/z4r3gwa8vy9ipsm5xrywmd2vmbvzfqqy-contravariant-1.5.5' '/nix/store/ahzmxirma6v42vl3f62b4gfzjwdzcmsx-StateVar-1.2.2' '/nix/store/2p9sgwxnxgg0b1c3n5bb9318ahfyp29j-these-1.2' '/nix/store/pkigai35g9w3bf2a0x5w0729w5jck5ib-strict-0.5' '/nix/store/ywwfrfjp5gj1wi3l8r3506h8brh235aw-text-short-0.1.6' '/nix/store/qs3cpafvgcvsrfb52rqfmv015fwhhs78-time-compat-1.9.6.1' '/nix/store/1plj5sd5cjqd232kdbg17alhc573kpww-uuid-types-1.0.5.1' '/nix/store/y9n9xfr41ha7292lbxv3ip8qfigrpv3z-witherable-0.4.2' '/nix/store/aq6kskyaxsgmlwf83b12bvq5bs9i65bp-Diff-0.4.1' '/nix/store/3q1kdgf6wbqy6s1rrrhay97lngfiwzqa-file-embed-0.0.16.0' '/nix/store/wqq0k8yn9d2zz7aviklmhn3bzvdq7c72-ghc-lib-parser-9.6.5.20240423' '/nix/store/x90ndh3wyq63c3fmmwa0ydph4kj341mq-megaparsec-9.5.0' '/nix/store/k7a1lan182v2zalbyz73nysiw0x57acj-case-insensitive-1.2.1.0' '/nix/store/hn54nyn1qcdrg9xvafylyz5w2w7vkmdx-parser-combinators-1.3.0' '/nix/store/m67xhyzkpj2wnkqhh7i89skpygvi86m2-MemoTrie-0.6.11' '/nix/store/y8k92b19kq2f13fpr239471645d1f8ap-newtype-generics-0.6.2' '/nix/store/41jvmqs71ir64my645cnc6k2r659nxg2-syb-0.7.2.4' '/nix/store/a081rfg9n6vnal0gmwwnhvgg1wqz1p83-yaml-0.11.11.2' '/nix/store/vvz6a24289q5gxqzg5yw59spclxvy52b-conduit-1.3.5' '/nix/store/lnd6slgglckldfwyqmwk7mvv4fyznk07-mono-traversable-1.0.17.0' '/nix/store/kxgd4n5s8l1pdj8bgz752406jxjc7jib-split-0.2.5' '/nix/store/nz5mccrbcjg0dg45irxqwzjlfc428i4s-vector-algorithms-0.9.0.1' '/nix/store/l338zm8k3879946c41znd2v9r1bssw84-bitvec-1.1.5.0' '/nix/store/a2x4b1d3davfsl08k95qf27nx58plmfh-resourcet-1.3.0' '/nix/store/m6i0cj63d7b3y95cm7nl9xczyy18nw67-unliftio-core-0.2.1.0' '/nix/store/m6i0cj63d7b3y95cm7nl9xczyy18nw67-unliftio-core-0.2.1.0' '/nix/store/ni2bv8kf7r5nnd153zkh03xshxj3wmh4-libyaml-0.1.4' '/nix/store/lqk9fiapbn9w712kf01gsdpb9q3m2gmp-libyaml-clib-0.2.5' '/nix/store/6yv8v4b1wl3f38mfvd1f3m0rdaipz9w2-optparse-applicative-0.18.1.0' '/nix/store/53jqh1k9xjwmpn1d4mix8q5hxqf542p5-prettyprinter-1.7.1' '/nix/store/fw5h7cbxlkzc3m367j7z312yi41pw31c-prettyprinter-ansi-terminal-1.1.3' '/nix/store/r1sg1qbjjgrccmf2wn9qx3vvbr6l7rgw-th-env-0.1.1' '/nix/store/gd4cmaicrbbdca29aakjrnjz2p0aahk2-th-compat-0.1.5' '/nix/store/dqaidvk2pg17rp0a39si367zjsas7lmh-cabal-fmt-0.1.12' '/nix/store/ffjh4599brdvpc5lxi0nac5d1m52kkc6-cabal-fmt-0.1.12-bin' '/nix/store/7vdk4wsn6sv7g1in5mksdilkc9rfh9x0-cabal-install-3.10.3.0' '/nix/store/v7wxrl98qqhfsh3q9w9r55l7bmmf3hdq-base16-bytestring-1.0.2.0' '/nix/store/3yyn4zngji352g0x9gpg1y166g06i94k-Cabal-3.10.3.0' '/nix/store/3jfz1hs40misng5j70pxfrd3ayr6gp97-Cabal-syntax-3.10.3.0' '/nix/store/sj5qayxhx8z0mb45aar3rggcp2n8brpv-cabal-install-solver-3.10.2.1' '/nix/store/va22bfsfg9fjj0br8i8kwf56a8iq7yc3-edit-distance-0.2.2.1' '/nix/store/23fnpmi47h5mz8pn2bkncii78zp5c5vh-cryptohash-sha256-0.11.102.1' '/nix/store/8ssrzrppnc8pg8vsmkqlwmw9czr5rlyk-echo-0.1.4' '/nix/store/7sdkyljk1dykh7xlmpcbbdq7kvg7lx5s-hackage-security-0.6.2.4' '/nix/store/hki1wkwnj9430sbb7arkbfc3qplp9fvr-base64-bytestring-1.2.1.0' '/nix/store/l0kjql8gfrhfgqiqck8j2jscakb7dhbj-ed25519-0.0.5.0' '/nix/store/qi535nm30fyxnvc0x4wvml8srxdlsl9k-lukko-0.1.1.3' '/nix/store/nb9rr8x0i4nnag6f6dpvy12nczc48l80-network-3.1.4.0' '/nix/store/1frsni87cqhycjwnlqy7hld7w3ih2nwi-network-uri-2.6.4.2' '/nix/store/cfn2rqjqgffbsg5y23j2xzng2jaasp6m-tar-0.5.1.1' '/nix/store/43vgii2ggpy0achms7x6dn23krddl1gc-zlib-0.6.3.0' '/nix/store/sps3x16j5595j5d1fzaic7x5r3m4yw65-HTTP-4000.4.1' '/nix/store/x52czv1md4mbl5vigy1bpx4798b783y3-regex-base-0.94.0.2' '/nix/store/8gci4hf05k3gn26y72lv3wbh8imch44n-regex-posix-0.96.0.1' '/nix/store/g2ycy1rf8x4fcj18d486kbf6af8ll5nh-resolv-0.1.2.0' '/nix/store/fmjy7afyrjhjd2gpgljpjq4yaaggy67z-hlint-3.6.1' )
declare -a pkgsTargetTarget=('/nix/store/j4m3lwhh4x0bzilvi77d512ahry775nq-ncurses-6.4' '/nix/store/kbg5m7fyi1w23fyfmxjhhzcbd577rpg0-libffi-3.4.6' '/nix/store/r20kl3djvc3r5w5a0gwy4d896mn6b22a-elfutils-0.191' '/nix/store/rx6nkd40819acppajq29g1hxa4d9r35f-gmp-with-cxx-6.3.0' )
declare -a postFixupHooks=('_makeSymlinksRelativeInAllOutputs' '_multioutPropagateDev' )
declare -a postUnpackHooks=('_updateSourceDateEpochFromSourceRoot' )
declare -a preConfigureHooks=('_multioutConfig' )
preConfigurePhases=' updateAutotoolsGnuConfigScriptsPhase'
declare -a preFixupHooks=('_moveToShare' '_multioutDocs' '_multioutDevs' )
prefix='/home/jonathanl/code/lucid-htmx/lucid/outputs/out'
declare -a propagatedBuildDepFiles=('propagated-build-build-deps' 'propagated-native-build-inputs' 'propagated-build-target-deps' )
propagatedBuildInputs=''
export propagatedBuildInputs
declare -a propagatedHostDepFiles=('propagated-host-host-deps' 'propagated-build-inputs' )
propagatedNativeBuildInputs=''
export propagatedNativeBuildInputs
declare -a propagatedTargetDepFiles=('propagated-target-target-deps' )
shell='/nix/store/306znyj77fv49kwnkpxmb0j2znqpa8bj-bash-5.2p26/bin/bash'
export shell
shellHook='export LOCALE_ARCHIVE="/nix/store/hmy0ml9nw48c6znk3vn692m1pvk31k54-glibc-locales-2.39-52/lib/locale/locale-archive"
export LC_ALL=C.UTF-8
'
export shellHook
stdenv='/nix/store/xfhkjnpqjwlf6hlk1ysmq3aaq80f3bjj-stdenv-linux'
export stdenv
strictDeps=''
export strictDeps
system='x86_64-linux'
export system
declare -a unpackCmdHooks=('_defaultUnpack' )
_accumFlagsArray ()
{
 
    local name;
    if [ -n "$__structuredAttrs" ]; then
        for name in "$@";
        do
            local -n nameref="$name";
            flagsArray+=(${nameref+"${nameref[@]}"});
        done;
    else
        for name in "$@";
        do
            local -n nameref="$name";
            case "$name" in 
                *Array)
                    flagsArray+=(${nameref+"${nameref[@]}"})
                ;;
                *)
                    flagsArray+=(${nameref-})
                ;;
            esac;
        done;
    fi
}
_activatePkgs ()
{
 
    local hostOffset targetOffset;
    local pkg;
    for hostOffset in "${allPlatOffsets[@]}";
    do
        local pkgsVar="${pkgAccumVarVars[hostOffset + 1]}";
        for targetOffset in "${allPlatOffsets[@]}";
        do
            (( hostOffset <= targetOffset )) || continue;
            local pkgsRef="${pkgsVar}[$targetOffset - $hostOffset]";
            local pkgsSlice="${!pkgsRef}[@]";
            for pkg in ${!pkgsSlice+"${!pkgsSlice}"};
            do
                activatePackage "$pkg" "$hostOffset" "$targetOffset";
            done;
        done;
    done
}
_addRpathPrefix ()
{
 
    if [ "${NIX_NO_SELF_RPATH:-0}" != 1 ]; then
        export NIX_LDFLAGS="-rpath $1/lib ${NIX_LDFLAGS-}";
    fi
}
_addToEnv ()
{
 
    local depHostOffset depTargetOffset;
    local pkg;
    for depHostOffset in "${allPlatOffsets[@]}";
    do
        local hookVar="${pkgHookVarVars[depHostOffset + 1]}";
        local pkgsVar="${pkgAccumVarVars[depHostOffset + 1]}";
        for depTargetOffset in "${allPlatOffsets[@]}";
        do
            (( depHostOffset <= depTargetOffset )) || continue;
            local hookRef="${hookVar}[$depTargetOffset - $depHostOffset]";
            if [[ -z "${strictDeps-}" ]]; then
                local visitedPkgs="";
                for pkg in "${pkgsBuildBuild[@]}" "${pkgsBuildHost[@]}" "${pkgsBuildTarget[@]}" "${pkgsHostHost[@]}" "${pkgsHostTarget[@]}" "${pkgsTargetTarget[@]}";
                do
                    if [[ "$visitedPkgs" = *"$pkg"* ]]; then
                        continue;
                    fi;
                    runHook "${!hookRef}" "$pkg";
                    visitedPkgs+=" $pkg";
                done;
            else
                local pkgsRef="${pkgsVar}[$depTargetOffset - $depHostOffset]";
                local pkgsSlice="${!pkgsRef}[@]";
                for pkg in ${!pkgsSlice+"${!pkgsSlice}"};
                do
                    runHook "${!hookRef}" "$pkg";
                done;
            fi;
        done;
    done
}
_allFlags ()
{
 
    export system pname name version;
    for varName in $(awk 'BEGIN { for (v in ENVIRON) if (v ~ /^[a-z][a-zA-Z0-9_]*$/) print v }');
    do
        if (( "${NIX_DEBUG:-0}" >= 1 )); then
            printf "@%s@ -> %q\n" "${varName}" "${!varName}" 1>&2;
        fi;
        args+=("--subst-var" "$varName");
    done
}
_assignFirst ()
{
 
    local varName="$1";
    local _var;
    local REMOVE=REMOVE;
    shift;
    for _var in "$@";
    do
        if [ -n "${!_var-}" ]; then
            eval "${varName}"="${_var}";
            return;
        fi;
    done;
    echo;
    echo "error: _assignFirst: could not find a non-empty variable whose name to assign to ${varName}.";
    echo "       The following variables were all unset or empty:";
    echo "           $*";
    if [ -z "${out:-}" ]; then
        echo '       If you do not want an "out" output in your derivation, make sure to define';
        echo '       the other specific required outputs. This can be achieved by picking one';
        echo "       of the above as an output.";
        echo '       You do not have to remove "out" if you want to have a different default';
        echo '       output, because the first output is taken as a default.';
        echo;
    fi;
    return 1
}
_callImplicitHook ()
{
 
    local def="$1";
    local hookName="$2";
    if declare -F "$hookName" > /dev/null; then
        "$hookName";
    else
        if type -p "$hookName" > /dev/null; then
            source "$hookName";
        else
            if [ -n "${!hookName:-}" ]; then
                eval "${!hookName}";
            else
                return "$def";
            fi;
        fi;
    fi
}
_defaultUnpack ()
{
 
    local fn="$1";
    local destination;
    if [ -d "$fn" ]; then
        destination="$(stripHash "$fn")";
        if [ -e "$destination" ]; then
            echo "Cannot copy $fn to $destination: destination already exists!";
            echo "Did you specify two \"srcs\" with the same \"name\"?";
            return 1;
        fi;
        cp -pr --reflink=auto -- "$fn" "$destination";
    else
        case "$fn" in 
            *.tar.xz | *.tar.lzma | *.txz)
                ( XZ_OPT="--threads=$NIX_BUILD_CORES" xz -d < "$fn";
                true ) | tar xf - --mode=+w --warning=no-timestamp
            ;;
            *.tar | *.tar.* | *.tgz | *.tbz2 | *.tbz)
                tar xf "$fn" --mode=+w --warning=no-timestamp
            ;;
            *)
                return 1
            ;;
        esac;
    fi
}
_doStrip ()
{
 
    local -ra flags=(dontStripHost dontStripTarget);
    local -ra debugDirs=(stripDebugList stripDebugListTarget);
    local -ra allDirs=(stripAllList stripAllListTarget);
    local -ra stripCmds=(STRIP STRIP_FOR_TARGET);
    local -ra ranlibCmds=(RANLIB RANLIB_FOR_TARGET);
    stripDebugList=${stripDebugList[*]:-lib lib32 lib64 libexec bin sbin};
    stripDebugListTarget=${stripDebugListTarget[*]:-};
    stripAllList=${stripAllList[*]:-};
    stripAllListTarget=${stripAllListTarget[*]:-};
    local i;
    for i in ${!stripCmds[@]};
    do
        local -n flag="${flags[$i]}";
        local -n debugDirList="${debugDirs[$i]}";
        local -n allDirList="${allDirs[$i]}";
        local -n stripCmd="${stripCmds[$i]}";
        local -n ranlibCmd="${ranlibCmds[$i]}";
        if [[ -n "${dontStrip-}" || -n "${flag-}" ]] || ! type -f "${stripCmd-}" 2> /dev/null 1>&2; then
            continue;
        fi;
        stripDirs "$stripCmd" "$ranlibCmd" "$debugDirList" "${stripDebugFlags[*]:--S -p}";
        stripDirs "$stripCmd" "$ranlibCmd" "$allDirList" "${stripAllFlags[*]:--s -p}";
    done
}
_eval ()
{
 
    if declare -F "$1" > /dev/null 2>&1; then
        "$@";
    else
        eval "$1";
    fi
}
_makeSymlinksRelative ()
{
 
    local symlinkTarget;
    if [ "${dontRewriteSymlinks-}" ] || [ ! -e "$prefix" ]; then
        return;
    fi;
    while IFS= read -r -d '' f; do
        symlinkTarget=$(readlink "$f");
        if [[ "$symlinkTarget"/ != "$prefix"/* ]]; then
            continue;
        fi;
        if [ ! -e "$symlinkTarget" ]; then
            echo "the symlink $f is broken, it points to $symlinkTarget (which is missing)";
        fi;
        echo "rewriting symlink $f to be relative to $prefix";
        ln -snrf "$symlinkTarget" "$f";
    done < <(find $prefix -type l -print0)
}
_makeSymlinksRelativeInAllOutputs ()
{
 
    local output;
    for output in $(getAllOutputNames);
    do
        prefix="${!output}" _makeSymlinksRelative;
    done
}
_moveLib64 ()
{
 
    if [ "${dontMoveLib64-}" = 1 ]; then
        return;
    fi;
    if [ ! -e "$prefix/lib64" -o -L "$prefix/lib64" ]; then
        return;
    fi;
    echo "moving $prefix/lib64/* to $prefix/lib";
    mkdir -p $prefix/lib;
    shopt -s dotglob;
    for i in $prefix/lib64/*;
    do
        mv --no-clobber "$i" $prefix/lib;
    done;
    shopt -u dotglob;
    rmdir $prefix/lib64;
    ln -s lib $prefix/lib64
}
_moveSbin ()
{
 
    if [ "${dontMoveSbin-}" = 1 ]; then
        return;
    fi;
    if [ ! -e "$prefix/sbin" -o -L "$prefix/sbin" ]; then
        return;
    fi;
    echo "moving $prefix/sbin/* to $prefix/bin";
    mkdir -p $prefix/bin;
    shopt -s dotglob;
    for i in $prefix/sbin/*;
    do
        mv "$i" $prefix/bin;
    done;
    shopt -u dotglob;
    rmdir $prefix/sbin;
    ln -s bin $prefix/sbin
}
_moveSystemdUserUnits ()
{
 
    if [ "${dontMoveSystemdUserUnits:-0}" = 1 ]; then
        return;
    fi;
    if [ ! -e "${prefix:?}/lib/systemd/user" ]; then
        return;
    fi;
    local source="$prefix/lib/systemd/user";
    local target="$prefix/share/systemd/user";
    echo "moving $source/* to $target";
    mkdir -p "$target";
    ( shopt -s dotglob;
    for i in "$source"/*;
    do
        mv "$i" "$target";
    done );
    rmdir "$source";
    ln -s "$target" "$source"
}
_moveToShare ()
{
 
    if [ -n "$__structuredAttrs" ]; then
        if [ -z "${forceShare-}" ]; then
            forceShare=(man doc info);
        fi;
    else
        forceShare=(${forceShare:-man doc info});
    fi;
    if [[ -z "$out" ]]; then
        return;
    fi;
    for d in "${forceShare[@]}";
    do
        if [ -d "$out/$d" ]; then
            if [ -d "$out/share/$d" ]; then
                echo "both $d/ and share/$d/ exist!";
            else
                echo "moving $out/$d to $out/share/$d";
                mkdir -p $out/share;
                mv $out/$d $out/share/;
            fi;
        fi;
    done
}
_multioutConfig ()
{
 
    if [ "$(getAllOutputNames)" = "out" ] || [ -z "${setOutputFlags-1}" ]; then
        return;
    fi;
    if [ -z "${shareDocName:-}" ]; then
        local confScript="${configureScript:-}";
        if [ -z "$confScript" ] && [ -x ./configure ]; then
            confScript=./configure;
        fi;
        if [ -f "$confScript" ]; then
            local shareDocName="$(sed -n "s/^PACKAGE_TARNAME='\(.*\)'$/\1/p" < "$confScript")";
        fi;
        if [ -z "$shareDocName" ] || echo "$shareDocName" | grep -q '[^a-zA-Z0-9_-]'; then
            shareDocName="$(echo "$name" | sed 's/-[^a-zA-Z].*//')";
        fi;
    fi;
    prependToVar configureFlags --bindir="${!outputBin}"/bin --sbindir="${!outputBin}"/sbin --includedir="${!outputInclude}"/include --oldincludedir="${!outputInclude}"/include --mandir="${!outputMan}"/share/man --infodir="${!outputInfo}"/share/info --docdir="${!outputDoc}"/share/doc/"${shareDocName}" --libdir="${!outputLib}"/lib --libexecdir="${!outputLib}"/libexec --localedir="${!outputLib}"/share/locale;
    prependToVar installFlags pkgconfigdir="${!outputDev}"/lib/pkgconfig m4datadir="${!outputDev}"/share/aclocal aclocaldir="${!outputDev}"/share/aclocal
}
_multioutDevs ()
{
 
    if [ "$(getAllOutputNames)" = "out" ] || [ -z "${moveToDev-1}" ]; then
        return;
    fi;
    moveToOutput include "${!outputInclude}";
    moveToOutput lib/pkgconfig "${!outputDev}";
    moveToOutput share/pkgconfig "${!outputDev}";
    moveToOutput lib/cmake "${!outputDev}";
    moveToOutput share/aclocal "${!outputDev}";
    for f in "${!outputDev}"/{lib,share}/pkgconfig/*.pc;
    do
        echo "Patching '$f' includedir to output ${!outputInclude}";
        sed -i "/^includedir=/s,=\${prefix},=${!outputInclude}," "$f";
    done
}
_multioutDocs ()
{
 
    local REMOVE=REMOVE;
    moveToOutput share/info "${!outputInfo}";
    moveToOutput share/doc "${!outputDoc}";
    moveToOutput share/gtk-doc "${!outputDevdoc}";
    moveToOutput share/devhelp/books "${!outputDevdoc}";
    moveToOutput share/man "${!outputMan}";
    moveToOutput share/man/man3 "${!outputDevman}"
}
_multioutPropagateDev ()
{
 
    if [ "$(getAllOutputNames)" = "out" ]; then
        return;
    fi;
    local outputFirst;
    for outputFirst in $(getAllOutputNames);
    do
        break;
    done;
    local propagaterOutput="$outputDev";
    if [ -z "$propagaterOutput" ]; then
        propagaterOutput="$outputFirst";
    fi;
    if [ -z "${propagatedBuildOutputs+1}" ]; then
        local po_dirty="$outputBin $outputInclude $outputLib";
        set +o pipefail;
        propagatedBuildOutputs=`echo "$po_dirty"             | tr -s ' ' '\n' | grep -v -F "$propagaterOutput"             | sort -u | tr '\n' ' ' `;
        set -o pipefail;
    fi;
    if [ -z "$propagatedBuildOutputs" ]; then
        return;
    fi;
    mkdir -p "${!propagaterOutput}"/nix-support;
    for output in $propagatedBuildOutputs;
    do
        echo -n " ${!output}" >> "${!propagaterOutput}"/nix-support/propagated-build-inputs;
    done
}
_overrideFirst ()
{
 
    if [ -z "${!1-}" ]; then
        _assignFirst "$@";
    fi
}
_pruneLibtoolFiles ()
{
 
    if [ "${dontPruneLibtoolFiles-}" ] || [ ! -e "$prefix" ]; then
        return;
    fi;
    find "$prefix" -type f -name '*.la' -exec grep -q '^# Generated by .*libtool' {} \; -exec grep -q "^old_library=''" {} \; -exec sed -i {} -e "/^dependency_libs='[^']/ c dependency_libs='' #pruned" \;
}
_updateSourceDateEpochFromSourceRoot ()
{
 
    if [ -n "$sourceRoot" ]; then
        updateSourceDateEpoch "$sourceRoot";
    fi
}
activatePackage ()
{
 
    local pkg="$1";
    local -r hostOffset="$2";
    local -r targetOffset="$3";
    (( hostOffset <= targetOffset )) || exit 1;
    if [ -f "$pkg" ]; then
        source "$pkg";
    fi;
    if [[ -z "${strictDeps-}" || "$hostOffset" -le -1 ]]; then
        addToSearchPath _PATH "$pkg/bin";
    fi;
    if (( hostOffset <= -1 )); then
        addToSearchPath _XDG_DATA_DIRS "$pkg/share";
    fi;
    if [[ "$hostOffset" -eq 0 && -d "$pkg/bin" ]]; then
        addToSearchPath _HOST_PATH "$pkg/bin";
    fi;
    if [[ -f "$pkg/nix-support/setup-hook" ]]; then
        source "$pkg/nix-support/setup-hook";
    fi
}
addEnvHooks ()
{
 
    local depHostOffset="$1";
    shift;
    local pkgHookVarsSlice="${pkgHookVarVars[$depHostOffset + 1]}[@]";
    local pkgHookVar;
    for pkgHookVar in "${!pkgHookVarsSlice}";
    do
        eval "${pkgHookVar}s"'+=("$@")';
    done
}
addToSearchPath ()
{
 
    addToSearchPathWithCustomDelimiter ":" "$@"
}
addToSearchPathWithCustomDelimiter ()
{
 
    local delimiter="$1";
    local varName="$2";
    local dir="$3";
    if [[ -d "$dir" && "${!varName:+${delimiter}${!varName}${delimiter}}" != *"${delimiter}${dir}${delimiter}"* ]]; then
        export "${varName}=${!varName:+${!varName}${delimiter}}${dir}";
    fi
}
appendToVar ()
{
 
    local -n nameref="$1";
    local useArray type;
    if [ -n "$__structuredAttrs" ]; then
        useArray=true;
    else
        useArray=false;
    fi;
    if declare -p "$1" 2> /dev/null | grep -q '^'; then
        type="$(declare -p "$1")";
        if [[ "$type" =~ "declare -A" ]]; then
            echo "appendToVar(): ERROR: trying to use appendToVar on an associative array, use variable+=([\"X\"]=\"Y\") instead." 1>&2;
            return 1;
        else
            if [[ "$type" =~ "declare -a" ]]; then
                useArray=true;
            else
                useArray=false;
            fi;
        fi;
    fi;
    shift;
    if $useArray; then
        nameref=(${nameref+"${nameref[@]}"} "$@");
    else
        nameref="${nameref-} $*";
    fi
}
auditTmpdir ()
{
 
    local dir="$1";
    [ -e "$dir" ] || return 0;
    echo "checking for references to $TMPDIR/ in $dir...";
    local i;
    find "$dir" -type f -print0 | while IFS= read -r -d '' i; do
        if [[ "$i" =~ .build-id ]]; then
            continue;
        fi;
        if isELF "$i"; then
            if { 
                printf :;
                patchelf --print-rpath "$i"
            } | grep -q -F ":$TMPDIR/"; then
                echo "RPATH of binary $i contains a forbidden reference to $TMPDIR/";
                exit 1;
            fi;
        fi;
        if isScript "$i"; then
            if [ -e "$(dirname "$i")/.$(basename "$i")-wrapped" ]; then
                if grep -q -F "$TMPDIR/" "$i"; then
                    echo "wrapper script $i contains a forbidden reference to $TMPDIR/";
                    exit 1;
                fi;
            fi;
        fi;
    done
}
bintoolsWrapper_addLDVars ()
{
 
    local role_post;
    getHostRoleEnvHook;
    if [[ -d "$1/lib64" && ! -L "$1/lib64" ]]; then
        export NIX_LDFLAGS${role_post}+=" -L$1/lib64";
    fi;
    if [[ -d "$1/lib" ]]; then
        local -a glob=($1/lib/lib*);
        if [ "${#glob[*]}" -gt 0 ]; then
            export NIX_LDFLAGS${role_post}+=" -L$1/lib";
        fi;
    fi
}
buildPhase ()
{
 
    runHook preBuild;
    if [[ -z "${makeFlags-}" && -z "${makefile:-}" && ! ( -e Makefile || -e makefile || -e GNUmakefile ) ]]; then
        echo "no Makefile or custom buildPhase, doing nothing";
    else
        foundMakefile=1;
        local flagsArray=(${enableParallelBuilding:+-j${NIX_BUILD_CORES}} SHELL=$SHELL);
        _accumFlagsArray makeFlags makeFlagsArray buildFlags buildFlagsArray;
        echoCmd 'build flags' "${flagsArray[@]}";
        make ${makefile:+-f $makefile} "${flagsArray[@]}";
        unset flagsArray;
    fi;
    runHook postBuild
}
ccWrapper_addCVars ()
{
 
    local role_post;
    getHostRoleEnvHook;
    if [ -d "$1/include" ]; then
        export NIX_CFLAGS_COMPILE${role_post}+=" -isystem $1/include";
    fi;
    if [ -d "$1/Library/Frameworks" ]; then
        export NIX_CFLAGS_COMPILE${role_post}+=" -iframework $1/Library/Frameworks";
    fi
}
checkPhase ()
{
 
    runHook preCheck;
    if [[ -z "${foundMakefile:-}" ]]; then
        echo "no Makefile or custom checkPhase, doing nothing";
        runHook postCheck;
        return;
    fi;
    if [[ -z "${checkTarget:-}" ]]; then
        if make -n ${makefile:+-f $makefile} check > /dev/null 2>&1; then
            checkTarget=check;
        else
            if make -n ${makefile:+-f $makefile} test > /dev/null 2>&1; then
                checkTarget=test;
            fi;
        fi;
    fi;
    if [[ -z "${checkTarget:-}" ]]; then
        echo "no check/test target in ${makefile:-Makefile}, doing nothing";
    else
        local flagsArray=(${enableParallelChecking:+-j${NIX_BUILD_CORES}} SHELL=$SHELL);
        _accumFlagsArray makeFlags makeFlagsArray;
        if [ -n "$__structuredAttrs" ]; then
            flagsArray+=("${checkFlags[@]:-VERBOSE=y}");
        else
            flagsArray+=(${checkFlags:-VERBOSE=y});
        fi;
        _accumFlagsArray checkFlagsArray;
        flagsArray+=(${checkTarget});
        echoCmd 'check flags' "${flagsArray[@]}";
        make ${makefile:+-f $makefile} "${flagsArray[@]}";
        unset flagsArray;
    fi;
    runHook postCheck
}
compressManPages ()
{
 
    local dir="$1";
    if [ -L "$dir"/share ] || [ -L "$dir"/share/man ] || [ ! -d "$dir/share/man" ]; then
        return;
    fi;
    echo "gzipping man pages under $dir/share/man/";
    find "$dir"/share/man/ -type f -a '!' -regex '.*\.\(bz2\|gz\|xz\)$' -print0 | while IFS= read -r -d '' f; do
        if gzip -c -n "$f" > "$f".gz; then
            rm "$f";
        else
            rm "$f".gz;
        fi;
    done;
    find "$dir"/share/man/ -type l -a '!' -regex '.*\.\(bz2\|gz\|xz\)$' -print0 | sort -z | while IFS= read -r -d '' f; do
        local target;
        target="$(readlink -f "$f")";
        if [ -f "$target".gz ]; then
            ln -sf "$target".gz "$f".gz && rm "$f";
        fi;
    done
}
configurePhase ()
{
 
    runHook preConfigure;
    : "${configureScript=}";
    if [[ -z "$configureScript" && -x ./configure ]]; then
        configureScript=./configure;
    fi;
    if [ -z "${dontFixLibtool:-}" ]; then
        export lt_cv_deplibs_check_method="${lt_cv_deplibs_check_method-pass_all}";
        local i;
        find . -iname "ltmain.sh" -print0 | while IFS='' read -r -d '' i; do
            echo "fixing libtool script $i";
            fixLibtool "$i";
        done;
        CONFIGURE_MTIME_REFERENCE=$(mktemp configure.mtime.reference.XXXXXX);
        find . -executable -type f -name configure -exec grep -l 'GNU Libtool is free software; you can redistribute it and/or modify' {} \; -exec touch -r {} "$CONFIGURE_MTIME_REFERENCE" \; -exec sed -i s_/usr/bin/file_file_g {} \; -exec touch -r "$CONFIGURE_MTIME_REFERENCE" {} \;;
        rm -f "$CONFIGURE_MTIME_REFERENCE";
    fi;
    if [[ -z "${dontAddPrefix:-}" && -n "$prefix" ]]; then
        prependToVar configureFlags "${prefixKey:---prefix=}$prefix";
    fi;
    if [[ -f "$configureScript" ]]; then
        if [ -z "${dontAddDisableDepTrack:-}" ]; then
            if grep -q dependency-tracking "$configureScript"; then
                prependToVar configureFlags --disable-dependency-tracking;
            fi;
        fi;
        if [ -z "${dontDisableStatic:-}" ]; then
            if grep -q enable-static "$configureScript"; then
                prependToVar configureFlags --disable-static;
            fi;
        fi;
        if [ -z "${dontPatchShebangsInConfigure:-}" ]; then
            patchShebangs --build "$configureScript";
        fi;
    fi;
    if [ -n "$configureScript" ]; then
        local -a flagsArray;
        _accumFlagsArray configureFlags configureFlagsArray;
        echoCmd 'configure flags' "${flagsArray[@]}";
        $configureScript "${flagsArray[@]}";
        unset flagsArray;
    else
        echo "no configure script, doing nothing";
    fi;
    runHook postConfigure
}
consumeEntire ()
{
 
    if IFS='' read -r -d '' "$1"; then
        echo "consumeEntire(): ERROR: Input null bytes, won't process" 1>&2;
        return 1;
    fi
}
distPhase ()
{
 
    runHook preDist;
    local flagsArray=();
    _accumFlagsArray distFlags distFlagsArray;
    flagsArray+=(${distTarget:-dist});
    echo 'dist flags: %q' "${flagsArray[@]}";
    make ${makefile:+-f $makefile} "${flagsArray[@]}";
    if [ "${dontCopyDist:-0}" != 1 ]; then
        mkdir -p "$out/tarballs";
        cp -pvd ${tarballs[*]:-*.tar.gz} "$out/tarballs";
    fi;
    runHook postDist
}
dumpVars ()
{
 
    if [ "${noDumpEnvVars:-0}" != 1 ]; then
        export 2> /dev/null >| "$NIX_BUILD_TOP/env-vars" || true;
    fi
}
echoCmd ()
{
 
    printf "%s:" "$1";
    shift;
    printf ' %q' "$@";
    echo
}
exitHandler ()
{
 
    exitCode="$?";
    set +e;
    if [ -n "${showBuildStats:-}" ]; then
        read -r -d '' -a buildTimes < <(times);
        echo "build times:";
        echo "user time for the shell             ${buildTimes[0]}";
        echo "system time for the shell           ${buildTimes[1]}";
        echo "user time for all child processes   ${buildTimes[2]}";
        echo "system time for all child processes ${buildTimes[3]}";
    fi;
    if (( "$exitCode" != 0 )); then
        runHook failureHook;
        if [ -n "${succeedOnFailure:-}" ]; then
            echo "build failed with exit code $exitCode (ignored)";
            mkdir -p "$out/nix-support";
            printf "%s" "$exitCode" > "$out/nix-support/failed";
            exit 0;
        fi;
    else
        runHook exitHook;
    fi;
    return "$exitCode"
}
findInputs ()
{
 
    local -r pkg="$1";
    local -r hostOffset="$2";
    local -r targetOffset="$3";
    (( hostOffset <= targetOffset )) || exit 1;
    local varVar="${pkgAccumVarVars[hostOffset + 1]}";
    local varRef="$varVar[$((targetOffset - hostOffset))]";
    local var="${!varRef}";
    unset -v varVar varRef;
    local varSlice="$var[*]";
    case "${!varSlice-}" in 
        *" $pkg "*)
            return 0
        ;;
    esac;
    unset -v varSlice;
    eval "$var"'+=("$pkg")';
    if ! [ -e "$pkg" ]; then
        echo "build input $pkg does not exist" 1>&2;
        exit 1;
    fi;
    function mapOffset () 
    { 
        local -r inputOffset="$1";
        local -n outputOffset="$2";
        if (( inputOffset <= 0 )); then
            outputOffset=$((inputOffset + hostOffset));
        else
            outputOffset=$((inputOffset - 1 + targetOffset));
        fi
    };
    local relHostOffset;
    for relHostOffset in "${allPlatOffsets[@]}";
    do
        local files="${propagatedDepFilesVars[relHostOffset + 1]}";
        local hostOffsetNext;
        mapOffset "$relHostOffset" hostOffsetNext;
        (( -1 <= hostOffsetNext && hostOffsetNext <= 1 )) || continue;
        local relTargetOffset;
        for relTargetOffset in "${allPlatOffsets[@]}";
        do
            (( "$relHostOffset" <= "$relTargetOffset" )) || continue;
            local fileRef="${files}[$relTargetOffset - $relHostOffset]";
            local file="${!fileRef}";
            unset -v fileRef;
            local targetOffsetNext;
            mapOffset "$relTargetOffset" targetOffsetNext;
            (( -1 <= hostOffsetNext && hostOffsetNext <= 1 )) || continue;
            [[ -f "$pkg/nix-support/$file" ]] || continue;
            local pkgNext;
            read -r -d '' pkgNext < "$pkg/nix-support/$file" || true;
            for pkgNext in $pkgNext;
            do
                findInputs "$pkgNext" "$hostOffsetNext" "$targetOffsetNext";
            done;
        done;
    done
}
fixLibtool ()
{
 
    local search_path;
    for flag in $NIX_LDFLAGS;
    do
        case $flag in 
            -L*)
                search_path+=" ${flag#-L}"
            ;;
        esac;
    done;
    sed -i "$1" -e "s^eval \(sys_lib_search_path=\).*^\1'${search_path:-}'^" -e 's^eval sys_lib_.+search_path=.*^^'
}
fixupPhase ()
{
 
    local output;
    for output in $(getAllOutputNames);
    do
        if [ -e "${!output}" ]; then
            chmod -R u+w,u-s,g-s "${!output}";
        fi;
    done;
    runHook preFixup;
    local output;
    for output in $(getAllOutputNames);
    do
        prefix="${!output}" runHook fixupOutput;
    done;
    recordPropagatedDependencies;
    if [ -n "${setupHook:-}" ]; then
        mkdir -p "${!outputDev}/nix-support";
        substituteAll "$setupHook" "${!outputDev}/nix-support/setup-hook";
    fi;
    if [ -n "${setupHooks:-}" ]; then
        mkdir -p "${!outputDev}/nix-support";
        local hook;
        for hook in ${setupHooks[@]};
        do
            local content;
            consumeEntire content < "$hook";
            substituteAllStream content "file '$hook'" >> "${!outputDev}/nix-support/setup-hook";
            unset -v content;
        done;
        unset -v hook;
    fi;
    if [ -n "${propagatedUserEnvPkgs:-}" ]; then
        mkdir -p "${!outputBin}/nix-support";
        printWords $propagatedUserEnvPkgs > "${!outputBin}/nix-support/propagated-user-env-packages";
    fi;
    runHook postFixup
}
genericBuild ()
{
 
    export GZIP_NO_TIMESTAMPS=1;
    if [ -f "${buildCommandPath:-}" ]; then
        source "$buildCommandPath";
        return;
    fi;
    if [ -n "${buildCommand:-}" ]; then
        eval "$buildCommand";
        return;
    fi;
    if [ -z "${phases[*]:-}" ]; then
        phases="${prePhases[*]:-} unpackPhase patchPhase ${preConfigurePhases[*]:-}             configurePhase ${preBuildPhases[*]:-} buildPhase checkPhase             ${preInstallPhases[*]:-} installPhase ${preFixupPhases[*]:-} fixupPhase installCheckPhase             ${preDistPhases[*]:-} distPhase ${postPhases[*]:-}";
    fi;
    for curPhase in ${phases[*]};
    do
        runPhase "$curPhase";
    done
}
getAllOutputNames ()
{
 
    if [ -n "$__structuredAttrs" ]; then
        echo "${!outputs[*]}";
    else
        echo "$outputs";
    fi
}
getHostRole ()
{
 
    getRole "$hostOffset"
}
getHostRoleEnvHook ()
{
 
    getRole "$depHostOffset"
}
getRole ()
{
 
    case $1 in 
        -1)
            role_post='_FOR_BUILD'
        ;;
        0)
            role_post=''
        ;;
        1)
            role_post='_FOR_TARGET'
        ;;
        *)
            echo "binutils-wrapper-2.41: used as improper sort of dependency" 1>&2;
            return 1
        ;;
    esac
}
getTargetRole ()
{
 
    getRole "$targetOffset"
}
getTargetRoleEnvHook ()
{
 
    getRole "$depTargetOffset"
}
getTargetRoleWrapper ()
{
 
    case $targetOffset in 
        -1)
            export NIX_BINTOOLS_WRAPPER_TARGET_BUILD_x86_64_unknown_linux_gnu=1
        ;;
        0)
            export NIX_BINTOOLS_WRAPPER_TARGET_HOST_x86_64_unknown_linux_gnu=1
        ;;
        1)
            export NIX_BINTOOLS_WRAPPER_TARGET_TARGET_x86_64_unknown_linux_gnu=1
        ;;
        *)
            echo "binutils-wrapper-2.41: used as improper sort of dependency" 1>&2;
            return 1
        ;;
    esac
}
installCheckPhase ()
{
 
    runHook preInstallCheck;
    if [[ -z "${foundMakefile:-}" ]]; then
        echo "no Makefile or custom installCheckPhase, doing nothing";
    else
        if [[ -z "${installCheckTarget:-}" ]] && ! make -n ${makefile:+-f $makefile} "${installCheckTarget:-installcheck}" > /dev/null 2>&1; then
            echo "no installcheck target in ${makefile:-Makefile}, doing nothing";
        else
            local flagsArray=(${enableParallelChecking:+-j${NIX_BUILD_CORES}} SHELL=$SHELL);
            _accumFlagsArray makeFlags makeFlagsArray installCheckFlags installCheckFlagsArray;
            flagsArray+=(${installCheckTarget:-installcheck});
            echoCmd 'installcheck flags' "${flagsArray[@]}";
            make ${makefile:+-f $makefile} "${flagsArray[@]}";
            unset flagsArray;
        fi;
    fi;
    runHook postInstallCheck
}
installPhase ()
{
 
    runHook preInstall;
    if [[ -z "${makeFlags-}" && -z "${makefile:-}" && ! ( -e Makefile || -e makefile || -e GNUmakefile ) ]]; then
        echo "no Makefile or custom installPhase, doing nothing";
        runHook postInstall;
        return;
    else
        foundMakefile=1;
    fi;
    if [ -n "$prefix" ]; then
        mkdir -p "$prefix";
    fi;
    local flagsArray=(${enableParallelInstalling:+-j${NIX_BUILD_CORES}} SHELL=$SHELL);
    _accumFlagsArray makeFlags makeFlagsArray installFlags installFlagsArray;
    if [ -n "$__structuredAttrs" ]; then
        flagsArray+=("${installTargets[@]:-install}");
    else
        flagsArray+=(${installTargets:-install});
    fi;
    echoCmd 'install flags' "${flagsArray[@]}";
    make ${makefile:+-f $makefile} "${flagsArray[@]}";
    unset flagsArray;
    runHook postInstall
}
isELF ()
{
 
    local fn="$1";
    local fd;
    local magic;
    exec {fd}< "$fn";
    read -r -n 4 -u "$fd" magic;
    exec {fd}>&-;
    if [ "$magic" = 'ELF' ]; then
        return 0;
    else
        return 1;
    fi
}
isMachO ()
{
 
    local fn="$1";
    local fd;
    local magic;
    exec {fd}< "$fn";
    read -r -n 4 -u "$fd" magic;
    exec {fd}>&-;
    if [[ "$magic" = $(echo -ne "\xfe\xed\xfa\xcf") || "$magic" = $(echo -ne "\xcf\xfa\xed\xfe") ]]; then
        return 0;
    else
        if [[ "$magic" = $(echo -ne "\xfe\xed\xfa\xce") || "$magic" = $(echo -ne "\xce\xfa\xed\xfe") ]]; then
            return 0;
        else
            if [[ "$magic" = $(echo -ne "\xca\xfe\xba\xbe") || "$magic" = $(echo -ne "\xbe\xba\xfe\xca") ]]; then
                return 0;
            else
                return 1;
            fi;
        fi;
    fi
}
isScript ()
{
 
    local fn="$1";
    local fd;
    local magic;
    exec {fd}< "$fn";
    read -r -n 2 -u "$fd" magic;
    exec {fd}>&-;
    if [[ "$magic" =~ \#! ]]; then
        return 0;
    else
        return 1;
    fi
}
mapOffset ()
{
 
    local -r inputOffset="$1";
    local -n outputOffset="$2";
    if (( inputOffset <= 0 )); then
        outputOffset=$((inputOffset + hostOffset));
    else
        outputOffset=$((inputOffset - 1 + targetOffset));
    fi
}
moveToOutput ()
{
 
    local patt="$1";
    local dstOut="$2";
    local output;
    for output in $(getAllOutputNames);
    do
        if [ "${!output}" = "$dstOut" ]; then
            continue;
        fi;
        local srcPath;
        for srcPath in "${!output}"/$patt;
        do
            if [ ! -e "$srcPath" ] && [ ! -L "$srcPath" ]; then
                continue;
            fi;
            if [ "$dstOut" = REMOVE ]; then
                echo "Removing $srcPath";
                rm -r "$srcPath";
            else
                local dstPath="$dstOut${srcPath#${!output}}";
                echo "Moving $srcPath to $dstPath";
                if [ -d "$dstPath" ] && [ -d "$srcPath" ]; then
                    rmdir "$srcPath" --ignore-fail-on-non-empty;
                    if [ -d "$srcPath" ]; then
                        mv -t "$dstPath" "$srcPath"/*;
                        rmdir "$srcPath";
                    fi;
                else
                    mkdir -p "$(readlink -m "$dstPath/..")";
                    mv "$srcPath" "$dstPath";
                fi;
            fi;
            local srcParent="$(readlink -m "$srcPath/..")";
            if [ -n "$(find "$srcParent" -maxdepth 0 -type d -empty 2> /dev/null)" ]; then
                echo "Removing empty $srcParent/ and (possibly) its parents";
                rmdir -p --ignore-fail-on-non-empty "$srcParent" 2> /dev/null || true;
            fi;
        done;
    done
}
patchELF ()
{
 
    local dir="$1";
    [ -e "$dir" ] || return 0;
    echo "shrinking RPATHs of ELF executables and libraries in $dir";
    local i;
    while IFS= read -r -d '' i; do
        if [[ "$i" =~ .build-id ]]; then
            continue;
        fi;
        if ! isELF "$i"; then
            continue;
        fi;
        echo "shrinking $i";
        patchelf --shrink-rpath "$i" || true;
    done < <(find "$dir" -type f -print0)
}
patchPhase ()
{
 
    runHook prePatch;
    local -a patchesArray;
    if [ -n "$__structuredAttrs" ]; then
        patchesArray=(${patches:+"${patches[@]}"});
    else
        patchesArray=(${patches:-});
    fi;
    for i in "${patchesArray[@]}";
    do
        echo "applying patch $i";
        local uncompress=cat;
        case "$i" in 
            *.gz)
                uncompress="gzip -d"
            ;;
            *.bz2)
                uncompress="bzip2 -d"
            ;;
            *.xz)
                uncompress="xz -d"
            ;;
            *.lzma)
                uncompress="lzma -d"
            ;;
        esac;
        local -a flagsArray;
        if [ -n "$__structuredAttrs" ]; then
            flagsArray=("${patchFlags[@]:--p1}");
        else
            flagsArray=(${patchFlags:--p1});
        fi;
        $uncompress < "$i" 2>&1 | patch "${flagsArray[@]}";
    done;
    runHook postPatch
}
patchShebangs ()
{
 
    local pathName;
    local update;
    while [[ $# -gt 0 ]]; do
        case "$1" in 
            --host)
                pathName=HOST_PATH;
                shift
            ;;
            --build)
                pathName=PATH;
                shift
            ;;
            --update)
                update=true;
                shift
            ;;
            --)
                shift;
                break
            ;;
            -* | --*)
                echo "Unknown option $1 supplied to patchShebangs" 1>&2;
                return 1
            ;;
            *)
                break
            ;;
        esac;
    done;
    echo "patching script interpreter paths in $@";
    local f;
    local oldPath;
    local newPath;
    local arg0;
    local args;
    local oldInterpreterLine;
    local newInterpreterLine;
    if [[ $# -eq 0 ]]; then
        echo "No arguments supplied to patchShebangs" 1>&2;
        return 0;
    fi;
    local f;
    while IFS= read -r -d '' f; do
        isScript "$f" || continue;
        read -r oldInterpreterLine < "$f" || [ "$oldInterpreterLine" ];
        read -r oldPath arg0 args <<< "${oldInterpreterLine:2}";
        if [[ -z "${pathName:-}" ]]; then
            if [[ -n $strictDeps && $f == "$NIX_STORE"* ]]; then
                pathName=HOST_PATH;
            else
                pathName=PATH;
            fi;
        fi;
        if [[ "$oldPath" == *"/bin/env" ]]; then
            if [[ $arg0 == "-S" ]]; then
                arg0=${args%% *};
                args=${args#* };
                newPath="$(PATH="${!pathName}" command -v "env" || true)";
                args="-S $(PATH="${!pathName}" command -v "$arg0" || true) $args";
            else
                if [[ $arg0 == "-"* || $arg0 == *"="* ]]; then
                    echo "$f: unsupported interpreter directive \"$oldInterpreterLine\" (set dontPatchShebangs=1 and handle shebang patching yourself)" 1>&2;
                    exit 1;
                else
                    newPath="$(PATH="${!pathName}" command -v "$arg0" || true)";
                fi;
            fi;
        else
            if [[ -z $oldPath ]]; then
                oldPath="/bin/sh";
            fi;
            newPath="$(PATH="${!pathName}" command -v "$(basename "$oldPath")" || true)";
            args="$arg0 $args";
        fi;
        newInterpreterLine="$newPath $args";
        newInterpreterLine=${newInterpreterLine%${newInterpreterLine##*[![:space:]]}};
        if [[ -n "$oldPath" && ( "$update" == true || "${oldPath:0:${#NIX_STORE}}" != "$NIX_STORE" ) ]]; then
            if [[ -n "$newPath" && "$newPath" != "$oldPath" ]]; then
                echo "$f: interpreter directive changed from \"$oldInterpreterLine\" to \"$newInterpreterLine\"";
                escapedInterpreterLine=${newInterpreterLine//\\/\\\\};
                timestamp=$(stat --printf "%y" "$f");
                sed -i -e "1 s|.*|#\!$escapedInterpreterLine|" "$f";
                touch --date "$timestamp" "$f";
            fi;
        fi;
    done < <(find "$@" -type f -perm -0100 -print0)
}
patchShebangsAuto ()
{
 
    if [[ -z "${dontPatchShebangs-}" && -e "$prefix" ]]; then
        if [[ "$output" != out && "$output" = "$outputDev" ]]; then
            patchShebangs --build "$prefix";
        else
            patchShebangs --host "$prefix";
        fi;
    fi
}
prependToVar ()
{
 
    local -n nameref="$1";
    local useArray type;
    if [ -n "$__structuredAttrs" ]; then
        useArray=true;
    else
        useArray=false;
    fi;
    if declare -p "$1" 2> /dev/null | grep -q '^'; then
        type="$(declare -p "$1")";
        if [[ "$type" =~ "declare -A" ]]; then
            echo "prependToVar(): ERROR: trying to use prependToVar on an associative array." 1>&2;
            return 1;
        else
            if [[ "$type" =~ "declare -a" ]]; then
                useArray=true;
            else
                useArray=false;
            fi;
        fi;
    fi;
    shift;
    if $useArray; then
        nameref=("$@" ${nameref+"${nameref[@]}"});
    else
        nameref="$* ${nameref-}";
    fi
}
printLines ()
{
 
    (( "$#" > 0 )) || return 0;
    printf '%s\n' "$@"
}
printWords ()
{
 
    (( "$#" > 0 )) || return 0;
    printf '%s ' "$@"
}
recordPropagatedDependencies ()
{
 
    declare -ra flatVars=(depsBuildBuildPropagated propagatedNativeBuildInputs depsBuildTargetPropagated depsHostHostPropagated propagatedBuildInputs depsTargetTargetPropagated);
    declare -ra flatFiles=("${propagatedBuildDepFiles[@]}" "${propagatedHostDepFiles[@]}" "${propagatedTargetDepFiles[@]}");
    local propagatedInputsIndex;
    for propagatedInputsIndex in "${!flatVars[@]}";
    do
        local propagatedInputsSlice="${flatVars[$propagatedInputsIndex]}[@]";
        local propagatedInputsFile="${flatFiles[$propagatedInputsIndex]}";
        [[ -n "${!propagatedInputsSlice}" ]] || continue;
        mkdir -p "${!outputDev}/nix-support";
        printWords ${!propagatedInputsSlice} > "${!outputDev}/nix-support/$propagatedInputsFile";
    done
}
runHook ()
{
 
    local hookName="$1";
    shift;
    local hooksSlice="${hookName%Hook}Hooks[@]";
    local hook;
    for hook in "_callImplicitHook 0 $hookName" ${!hooksSlice+"${!hooksSlice}"};
    do
        _eval "$hook" "$@";
    done;
    return 0
}
runOneHook ()
{
 
    local hookName="$1";
    shift;
    local hooksSlice="${hookName%Hook}Hooks[@]";
    local hook ret=1;
    for hook in "_callImplicitHook 1 $hookName" ${!hooksSlice+"${!hooksSlice}"};
    do
        if _eval "$hook" "$@"; then
            ret=0;
            break;
        fi;
    done;
    return "$ret"
}
runPhase ()
{
 
    local curPhase="$*";
    if [[ "$curPhase" = unpackPhase && -n "${dontUnpack:-}" ]]; then
        return;
    fi;
    if [[ "$curPhase" = patchPhase && -n "${dontPatch:-}" ]]; then
        return;
    fi;
    if [[ "$curPhase" = configurePhase && -n "${dontConfigure:-}" ]]; then
        return;
    fi;
    if [[ "$curPhase" = buildPhase && -n "${dontBuild:-}" ]]; then
        return;
    fi;
    if [[ "$curPhase" = checkPhase && -z "${doCheck:-}" ]]; then
        return;
    fi;
    if [[ "$curPhase" = installPhase && -n "${dontInstall:-}" ]]; then
        return;
    fi;
    if [[ "$curPhase" = fixupPhase && -n "${dontFixup:-}" ]]; then
        return;
    fi;
    if [[ "$curPhase" = installCheckPhase && -z "${doInstallCheck:-}" ]]; then
        return;
    fi;
    if [[ "$curPhase" = distPhase && -z "${doDist:-}" ]]; then
        return;
    fi;
    if [[ -n $NIX_LOG_FD ]]; then
        echo "@nix { \"action\": \"setPhase\", \"phase\": \"$curPhase\" }" >&"$NIX_LOG_FD";
    fi;
    showPhaseHeader "$curPhase";
    dumpVars;
    local startTime=$(date +"%s");
    eval "${!curPhase:-$curPhase}";
    local endTime=$(date +"%s");
    showPhaseFooter "$curPhase" "$startTime" "$endTime";
    if [ "$curPhase" = unpackPhase ]; then
        [ -n "${sourceRoot:-}" ] && chmod +x "${sourceRoot}";
        cd "${sourceRoot:-.}";
    fi
}
showPhaseFooter ()
{
 
    local phase="$1";
    local startTime="$2";
    local endTime="$3";
    local delta=$(( endTime - startTime ));
    (( delta < 30 )) && return;
    local H=$((delta/3600));
    local M=$((delta%3600/60));
    local S=$((delta%60));
    echo -n "$phase completed in ";
    (( H > 0 )) && echo -n "$H hours ";
    (( M > 0 )) && echo -n "$M minutes ";
    echo "$S seconds"
}
showPhaseHeader ()
{
 
    local phase="$1";
    echo "Running phase: $phase"
}
stripDirs ()
{
 
    local cmd="$1";
    local ranlibCmd="$2";
    local paths="$3";
    local stripFlags="$4";
    local excludeFlags=();
    local pathsNew=;
    [ -z "$cmd" ] && echo "stripDirs: Strip command is empty" 1>&2 && exit 1;
    [ -z "$ranlibCmd" ] && echo "stripDirs: Ranlib command is empty" 1>&2 && exit 1;
    local pattern;
    if [ -n "${stripExclude:-}" ]; then
        for pattern in "${stripExclude[@]}";
        do
            excludeFlags+=(-a '!' '(' -name "$pattern" -o -wholename "$prefix/$pattern" ')');
        done;
    fi;
    local p;
    for p in ${paths};
    do
        if [ -e "$prefix/$p" ]; then
            pathsNew="${pathsNew} $prefix/$p";
        fi;
    done;
    paths=${pathsNew};
    if [ -n "${paths}" ]; then
        echo "stripping (with command $cmd and flags $stripFlags) in $paths";
        local striperr;
        striperr="$(mktemp --tmpdir="$TMPDIR" 'striperr.XXXXXX')";
        find $paths -type f "${excludeFlags[@]}" -a '!' -path "$prefix/lib/debug/*" -print0 | xargs -r -0 -n1 -- realpath -z | sort -u -z | xargs -r -0 -n1 -P "$NIX_BUILD_CORES" -- $cmd $stripFlags 2> "$striperr" || exit_code=$?;
        [[ "$exit_code" = 123 || -z "$exit_code" ]] || ( cat "$striperr" 1>&2 && exit 1 );
        rm "$striperr";
        find $paths -name '*.a' -type f -exec $ranlibCmd '{}' \; 2> /dev/null;
    fi
}
stripHash ()
{
 
    local strippedName casematchOpt=0;
    strippedName="$(basename -- "$1")";
    shopt -q nocasematch && casematchOpt=1;
    shopt -u nocasematch;
    if [[ "$strippedName" =~ ^[a-z0-9]{32}- ]]; then
        echo "${strippedName:33}";
    else
        echo "$strippedName";
    fi;
    if (( casematchOpt )); then
        shopt -s nocasematch;
    fi
}
substitute ()
{
 
    local input="$1";
    local output="$2";
    shift 2;
    if [ ! -f "$input" ]; then
        echo "substitute(): ERROR: file '$input' does not exist" 1>&2;
        return 1;
    fi;
    local content;
    consumeEntire content < "$input";
    if [ -e "$output" ]; then
        chmod +w "$output";
    fi;
    substituteStream content "file '$input'" "$@" > "$output"
}
substituteAll ()
{
 
    local input="$1";
    local output="$2";
    local -a args=();
    _allFlags;
    substitute "$input" "$output" "${args[@]}"
}
substituteAllInPlace ()
{
 
    local fileName="$1";
    shift;
    substituteAll "$fileName" "$fileName" "$@"
}
substituteAllStream ()
{
 
    local -a args=();
    _allFlags;
    substituteStream "$1" "$2" "${args[@]}"
}
substituteInPlace ()
{
 
    local -a fileNames=();
    for arg in "$@";
    do
        if [[ "$arg" = "--"* ]]; then
            break;
        fi;
        fileNames+=("$arg");
        shift;
    done;
    for file in "${fileNames[@]}";
    do
        substitute "$file" "$file" "$@";
    done
}
substituteStream ()
{
 
    local var=$1;
    local description=$2;
    shift 2;
    while (( "$#" )); do
        local replace_mode="$1";
        case "$1" in 
            --replace)
                if ! "$_substituteStream_has_warned_replace_deprecation"; then
                    echo "substituteStream(): WARNING: '--replace' is deprecated, use --replace-{fail,warn,quiet}. ($description)" 1>&2;
                    _substituteStream_has_warned_replace_deprecation=true;
                fi;
                replace_mode='--replace-warn'
            ;&
            --replace-quiet | --replace-warn | --replace-fail)
                pattern="$2";
                replacement="$3";
                shift 3;
                local savedvar;
                savedvar="${!var}";
                eval "$var"'=${'"$var"'//"$pattern"/"$replacement"}';
                if [ "$pattern" != "$replacement" ]; then
                    if [ "${!var}" == "$savedvar" ]; then
                        if [ "$replace_mode" == --replace-warn ]; then
                            printf "substituteStream(): WARNING: pattern %q doesn't match anything in %s\n" "$pattern" "$description" 1>&2;
                        else
                            if [ "$replace_mode" == --replace-fail ]; then
                                printf "substituteStream(): ERROR: pattern %q doesn't match anything in %s\n" "$pattern" "$description" 1>&2;
                                return 1;
                            fi;
                        fi;
                    fi;
                fi
            ;;
            --subst-var)
                local varName="$2";
                shift 2;
                if ! [[ "$varName" =~ ^[a-zA-Z_][a-zA-Z0-9_]*$ ]]; then
                    echo "substituteStream(): ERROR: substitution variables must be valid Bash names, \"$varName\" isn't." 1>&2;
                    return 1;
                fi;
                if [ -z ${!varName+x} ]; then
                    echo "substituteStream(): ERROR: variable \$$varName is unset" 1>&2;
                    return 1;
                fi;
                pattern="@$varName@";
                replacement="${!varName}";
                eval "$var"'=${'"$var"'//"$pattern"/"$replacement"}'
            ;;
            --subst-var-by)
                pattern="@$2@";
                replacement="$3";
                eval "$var"'=${'"$var"'//"$pattern"/"$replacement"}';
                shift 3
            ;;
            *)
                echo "substituteStream(): ERROR: Invalid command line argument: $1" 1>&2;
                return 1
            ;;
        esac;
    done;
    printf "%s" "${!var}"
}
unpackFile ()
{
 
    curSrc="$1";
    echo "unpacking source archive $curSrc";
    if ! runOneHook unpackCmd "$curSrc"; then
        echo "do not know how to unpack source archive $curSrc";
        exit 1;
    fi
}
unpackPhase ()
{
 
    runHook preUnpack;
    if [ -z "${srcs:-}" ]; then
        if [ -z "${src:-}" ]; then
            echo 'variable $src or $srcs should point to the source';
            exit 1;
        fi;
        srcs="$src";
    fi;
    local -a srcsArray;
    if [ -n "$__structuredAttrs" ]; then
        srcsArray=("${srcs[@]}");
    else
        srcsArray=($srcs);
    fi;
    local dirsBefore="";
    for i in *;
    do
        if [ -d "$i" ]; then
            dirsBefore="$dirsBefore $i ";
        fi;
    done;
    for i in "${srcsArray[@]}";
    do
        unpackFile "$i";
    done;
    : "${sourceRoot=}";
    if [ -n "${setSourceRoot:-}" ]; then
        runOneHook setSourceRoot;
    else
        if [ -z "$sourceRoot" ]; then
            for i in *;
            do
                if [ -d "$i" ]; then
                    case $dirsBefore in 
                        *\ $i\ *)

                        ;;
                        *)
                            if [ -n "$sourceRoot" ]; then
                                echo "unpacker produced multiple directories";
                                exit 1;
                            fi;
                            sourceRoot="$i"
                        ;;
                    esac;
                fi;
            done;
        fi;
    fi;
    if [ -z "$sourceRoot" ]; then
        echo "unpacker appears to have produced no directories";
        exit 1;
    fi;
    echo "source root is $sourceRoot";
    if [ "${dontMakeSourcesWritable:-0}" != 1 ]; then
        chmod -R u+w -- "$sourceRoot";
    fi;
    runHook postUnpack
}
updateAutotoolsGnuConfigScriptsPhase ()
{
 
    if [ -n "${dontUpdateAutotoolsGnuConfigScripts-}" ]; then
        return;
    fi;
    for script in config.sub config.guess;
    do
        for f in $(find . -type f -name "$script");
        do
            echo "Updating Autotools / GNU config script to a newer upstream version: $f";
            cp -f "/nix/store/4i0j14zymvlngyyhq2254f4g9m9my98y-gnu-config-2024-01-01/$script" "$f";
        done;
    done
}
updateSourceDateEpoch ()
{
 
    local path="$1";
    local -a res=($(find "$path" -type f -not -newer "$NIX_BUILD_TOP/.." -printf '%T@ %p\0' | sort -n --zero-terminated | tail -n1 --zero-terminated | head -c -1));
    local time="${res[0]//\.[0-9]*/}";
    local newestFile="${res[1]}";
    if [ "${time:-0}" -gt "$SOURCE_DATE_EPOCH" ]; then
        echo "setting SOURCE_DATE_EPOCH to timestamp $time of file $newestFile";
        export SOURCE_DATE_EPOCH="$time";
        local now="$(date +%s)";
        if [ "$time" -gt $((now - 60)) ]; then
            echo "warning: file $newestFile may be generated; SOURCE_DATE_EPOCH may be non-deterministic";
        fi;
    fi
}
PATH="$PATH${nix_saved_PATH:+:$nix_saved_PATH}"
XDG_DATA_DIRS="$XDG_DATA_DIRS${nix_saved_XDG_DATA_DIRS:+:$nix_saved_XDG_DATA_DIRS}"
export NIX_BUILD_TOP="$(mktemp -d -t nix-shell.XXXXXX)"
export TMP="$NIX_BUILD_TOP"
export TMPDIR="$NIX_BUILD_TOP"
export TEMP="$NIX_BUILD_TOP"
export TEMPDIR="$NIX_BUILD_TOP"
eval "$shellHook"
